From fc8a2896301d660284da7db91ec62e21668165d0 Mon Sep 17 00:00:00 2001
From: UDPSendToFailed <udpsendtofailed@gmail.com>
Date: Wed, 5 Apr 2023 18:36:02 +0200
Subject: [PATCH] Revert "Camera: Add extensions to CameraClient"

This reverts commit 7ec6ccf623c166c4119ababc146fc6dddceed93a.
---
 .../libcameraservice/api1/CameraClient.cpp    | 33 ++-----------------
 .../libcameraservice/api1/CameraClient.h      |  3 --
 2 files changed, 2 insertions(+), 34 deletions(-)

diff --git a/services/camera/libcameraservice/api1/CameraClient.cpp b/services/camera/libcameraservice/api1/CameraClient.cpp
index b88b630bd3..1d08b2a6e1 100644
--- a/services/camera/libcameraservice/api1/CameraClient.cpp
+++ b/services/camera/libcameraservice/api1/CameraClient.cpp
@@ -56,9 +56,6 @@ CameraClient::CameraClient(const sp<CameraService>& cameraService,
     mPreviewCallbackFlag = CAMERA_FRAME_CALLBACK_FLAG_NOOP;
     mOrientation = getOrientation(0, mCameraFacing == CAMERA_FACING_FRONT);
     mPlayShutterSound = true;
-
-    mLongshotEnabled = false;
-    mBurstCnt = 0;
     LOG1("CameraClient::CameraClient X (pid %d, id %d)", callingPid, cameraId);
 }
 
@@ -684,10 +681,6 @@ status_t CameraClient::takePicture(int msgType) {
                            CAMERA_MSG_COMPRESSED_IMAGE);
 
     enableMsgType(picMsgType);
-    mBurstCnt = mHardware->getParameters().getInt("num-snaps-per-shutter");
-    if(mBurstCnt <= 0)
-        mBurstCnt = 1;
-    LOG1("mBurstCnt = %d", mBurstCnt);
 
     return mHardware->takePicture();
 }
@@ -771,20 +764,6 @@ status_t CameraClient::sendCommand(int32_t cmd, int32_t arg1, int32_t arg2) {
     } else if (cmd == CAMERA_CMD_PING) {
         // If mHardware is 0, checkPidAndHardware will return error.
         return OK;
-    } else if (cmd == CAMERA_CMD_HISTOGRAM_ON) {
-        enableMsgType(CAMERA_MSG_STATS_DATA);
-    } else if (cmd == CAMERA_CMD_HISTOGRAM_OFF) {
-        disableMsgType(CAMERA_MSG_STATS_DATA);
-    } else if (cmd == CAMERA_CMD_METADATA_ON) {
-        enableMsgType(CAMERA_MSG_META_DATA);
-    } else if (cmd == CAMERA_CMD_METADATA_OFF) {
-        disableMsgType(CAMERA_MSG_META_DATA);
-    } else if ( cmd == CAMERA_CMD_LONGSHOT_ON ) {
-        mLongshotEnabled = true;
-    } else if ( cmd == CAMERA_CMD_LONGSHOT_OFF ) {
-        mLongshotEnabled = false;
-        disableMsgType(CAMERA_MSG_SHUTTER);
-        disableMsgType(CAMERA_MSG_COMPRESSED_IMAGE);
     }
 
     return mHardware->sendCommand(cmd, arg1, arg2);
@@ -984,9 +963,7 @@ void CameraClient::handleShutter(void) {
         c->notifyCallback(CAMERA_MSG_SHUTTER, 0, 0);
         if (!lockIfMessageWanted(CAMERA_MSG_SHUTTER)) return;
     }
-    if ( !mLongshotEnabled ) {
-        disableMsgType(CAMERA_MSG_SHUTTER);
-    }
+    disableMsgType(CAMERA_MSG_SHUTTER);
 
     // Shutters only happen in response to takePicture, so mark device as
     // idle now, until preview is restarted
@@ -1074,13 +1051,7 @@ void CameraClient::handleRawPicture(const sp<IMemory>& mem) {
 
 // picture callback - compressed picture ready
 void CameraClient::handleCompressedPicture(const sp<IMemory>& mem) {
-    if (mBurstCnt)
-        mBurstCnt--;
-
-    if (!mBurstCnt && !mLongshotEnabled) {
-        LOG1("handleCompressedPicture mBurstCnt = %d", mBurstCnt);
-        disableMsgType(CAMERA_MSG_COMPRESSED_IMAGE);
-    }
+    disableMsgType(CAMERA_MSG_COMPRESSED_IMAGE);
 
     sp<hardware::ICameraClient> c = mRemoteCallback;
     mLock.unlock();
diff --git a/services/camera/libcameraservice/api1/CameraClient.h b/services/camera/libcameraservice/api1/CameraClient.h
index c94bec559f..20e320a00b 100644
--- a/services/camera/libcameraservice/api1/CameraClient.h
+++ b/services/camera/libcameraservice/api1/CameraClient.h
@@ -187,9 +187,6 @@ private:
     // This function keeps trying to grab mLock, or give up if the message
     // is found to be disabled. It returns true if mLock is grabbed.
     bool                    lockIfMessageWanted(int32_t msgType);
-
-    bool                 mLongshotEnabled;
-    int                  mBurstCnt;
 };
 
 }
-- 
2.34.1

