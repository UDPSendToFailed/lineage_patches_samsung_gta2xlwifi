From 34ca9df359b4d0247bba48c822ec2c730dc91894 Mon Sep 17 00:00:00 2001
From: Anay Wadhera <awadhera@berkeley.edu>
Date: Thu, 06 Jan 2022 03:03:28 +0000
Subject: [PATCH] ThemePicker: Reverse color section from Pixel stock

ThemePicker: Implement coloring in wallpaper preview fragment

Change-Id: I78206bbe6b96529975b5cefd0a3a2ae55623c505

ThemePicker: Fixup color preview and adapt to Google monet

 * Thanks to dotOS for WallpaperColorResources
 * Misc code cleanup

Change-Id: Idb687ac6693cf005d1b836ea70942d716b98bf28

ThemePicker: Import color section from dotOS

[ghostrider-reborn: rework build setup]

Change-Id: I96670305884efaae8ba1d707ddd406375ed78ed1

ThemePicker: Fix incorrect logic in wallpapersColorsChanged

Fixes a crash when lockscreen wallpaper is different
from home screen wallpaper, or some other unknown case.

Change-Id: Iab496d67f7ab5f363102b633a0708867df0121d6

ThemePicker: Defer color section adapter binding

We need to make sure color options are fully initialized
before setting up selectors. This fixes the race, which
lead to the disappearance of color selectors, between
loading color options and binding viewholders.

Change-Id: Icdab4d1225862dd8c81db3655be89346a29c8122

ThemePicker: Check initialization before saving item index

onSaveInstanceState() will be called before createView() in some cases.

Co-authored-by: Anay Wadhera <anay1018@gmail.com>
Co-authored-by: LibXZR <i@xzr.moe>
Co-authored-by: Adithya R <gh0strider.2k18.reborn@gmail.com>
Change-Id: I96670305884efaae8ba1d707ddd406375ed78ed1
---

diff --git a/Android.bp b/Android.bp
index 28749ea..988c3b6 100644
--- a/Android.bp
+++ b/Android.bp
@@ -62,6 +62,26 @@
         + "$(location soong_zip) -o $(out) -C $$RES_DIR -D $$RES_DIR"
 }
 
+android_library {
+    name: "ThemePicker_core",
+
+    static_libs: [
+        "monet",
+        "wallpaper-common-deps",
+        "SettingsLibSettingsTheme",
+        "SystemUI-statsd",
+        "styleprotoslite",
+    ],
+
+    optimize: {
+        enabled: false,
+    },
+
+    resource_dirs: ["res"],
+
+    kotlincflags: ["-Xjvm-default=enable"],
+}
+
 //
 // Build app code.
 //
@@ -69,10 +89,7 @@
     name: "ThemePicker",
 
     static_libs: [
-        "wallpaper-common-deps",
-        "SettingsLibSettingsTheme",
-        "SystemUI-statsd",
-        "styleprotoslite",
+        "ThemePicker_core",
     ],
 
     srcs: [
@@ -90,7 +107,7 @@
         enabled: false,
     },
     kotlincflags: ["-Xjvm-default=enable"],
-    certificate: "",
+    certificate: "platform",
 
     privileged: true,
     system_ext_specific: true,
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index a86d70a..58a0e06 100755
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -12,6 +12,9 @@
 
     <uses-permission android:name="android.permission.MODIFY_DAY_NIGHT_MODE" />
 
+    <uses-permission android:name="android.permission.QUERY_ALL_PACKAGES" />
+    <uses-permission android:name="android.permission.INTERACT_ACROSS_USERS_FULL" />
+
     <queries>
         <!-- Specific intents Wallpaper picker query for -->
         <!-- Intent filter with action SET_WALLPAPER -->
diff --git a/res/drawable/color_chip_medium_filled.xml b/res/drawable/color_chip_medium_filled.xml
new file mode 100644
index 0000000..0628a30
--- /dev/null
+++ b/res/drawable/color_chip_medium_filled.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="oval">
+    <size
+        android:width="@dimen/component_color_chip_medium_size"
+        android:height="@dimen/component_color_chip_medium_size" />
+    <solid android:color="@android:color/black" />
+</shape>
diff --git a/res/drawable/color_chip_seed_filled0.xml b/res/drawable/color_chip_seed_filled0.xml
new file mode 100644
index 0000000..ebce662
--- /dev/null
+++ b/res/drawable/color_chip_seed_filled0.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape android:shape="rectangle">
+            <corners android:topLeftRadius="@dimen/component_color_chip_small_size_default" />
+            <size android:width="@dimen/component_color_chip_small_size_default" android:height="@dimen/component_color_chip_small_size_default" />
+            <solid android:color="@android:color/black" />
+        </shape>
+    </item>
+</selector>
diff --git a/res/drawable/color_chip_seed_filled1.xml b/res/drawable/color_chip_seed_filled1.xml
new file mode 100644
index 0000000..3abff07
--- /dev/null
+++ b/res/drawable/color_chip_seed_filled1.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape android:shape="rectangle">
+            <corners android:bottomLeftRadius="@dimen/component_color_chip_small_size_default" />
+            <size android:width="@dimen/component_color_chip_small_size_default" android:height="@dimen/component_color_chip_small_size_default" />
+            <solid android:color="@android:color/black" />
+        </shape>
+    </item>
+</selector>
diff --git a/res/drawable/color_chip_seed_filled2.xml b/res/drawable/color_chip_seed_filled2.xml
new file mode 100644
index 0000000..4f11270
--- /dev/null
+++ b/res/drawable/color_chip_seed_filled2.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape android:shape="rectangle">
+            <corners android:topRightRadius="@dimen/component_color_chip_small_size_default" />
+            <size android:width="@dimen/component_color_chip_small_size_default" android:height="@dimen/component_color_chip_small_size_default" />
+            <solid android:color="@android:color/black" />
+        </shape>
+    </item>
+</selector>
diff --git a/res/drawable/color_chip_seed_filled3.xml b/res/drawable/color_chip_seed_filled3.xml
new file mode 100644
index 0000000..54401aa
--- /dev/null
+++ b/res/drawable/color_chip_seed_filled3.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape android:shape="rectangle">
+            <corners android:bottomRightRadius="@dimen/component_color_chip_small_size_default" />
+            <size android:width="@dimen/component_color_chip_small_size_default" android:height="@dimen/component_color_chip_small_size_default" />
+            <solid android:color="@android:color/black" />
+        </shape>
+    </item>
+</selector>
diff --git a/res/layout/color_option.xml b/res/layout/color_option.xml
new file mode 100644
index 0000000..e936210
--- /dev/null
+++ b/res/layout/color_option.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:orientation="vertical"
+    android:paddingBottom="@dimen/color_option_tile_padding_bottom">
+
+    <RelativeLayout
+        android:id="@+id/option_tile"
+        android:layout_width="@dimen/option_tile_width_big"
+        android:layout_height="@dimen/option_tile_width_big"
+        android:layout_gravity="center_horizontal"
+        android:background="@drawable/option_border_color"
+        android:gravity="center">
+
+        <ImageView
+            android:id="@+id/color_preview_icon"
+            android:layout_width="@dimen/component_color_chip_container_medium_size"
+            android:layout_height="@dimen/component_color_chip_container_medium_size"
+            android:layout_marginHorizontal="@dimen/color_option_tile_margin_horizontal" />
+    </RelativeLayout>
+</FrameLayout>
diff --git a/res/layout/color_options_view.xml b/res/layout/color_options_view.xml
new file mode 100644
index 0000000..b86428f
--- /dev/null
+++ b/res/layout/color_options_view.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.recyclerview.widget.RecyclerView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/color_option_container"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="horizontal" />
diff --git a/res/layout/color_section_view.xml b/res/layout/color_section_view.xml
new file mode 100644
index 0000000..808fc0c
--- /dev/null
+++ b/res/layout/color_section_view.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.android.customization.picker.color.ColorSectionView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical">
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingHorizontal="@dimen/separated_tabs_horizontal_margin">
+
+        <include layout="@layout/separated_tabs" />
+    </FrameLayout>
+
+    <androidx.viewpager2.widget.ViewPager2
+        android:id="@+id/color_view_pager"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="@dimen/color_options_container_top_margin"
+        android:clipChildren="false"
+        android:clipToPadding="false"
+        android:minHeight="@dimen/color_options_container_min_height"
+        android:paddingHorizontal="@dimen/section_horizontal_padding" />
+
+
+</com.android.customization.picker.color.ColorSectionView>
diff --git a/res/layout/color_seed_option.xml b/res/layout/color_seed_option.xml
new file mode 100644
index 0000000..8f16c8c
--- /dev/null
+++ b/res/layout/color_seed_option.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:orientation="vertical"
+    android:paddingBottom="@dimen/color_option_tile_padding_bottom">
+
+    <FrameLayout
+        android:id="@+id/option_tile"
+        android:layout_width="@dimen/option_tile_width_big"
+        android:layout_height="@dimen/option_tile_width_big"
+        android:layout_gravity="center_horizontal"
+        android:background="@drawable/option_border_color">
+
+        <ImageView
+            android:id="@+id/color_preview_0"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:layout_marginEnd="@dimen/color_seed_chip_margin"
+            android:layout_marginBottom="@dimen/color_seed_chip_margin"
+            android:src="@drawable/color_chip_seed_filled0" />
+
+        <ImageView
+            android:id="@+id/color_preview_1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:layout_marginStart="@dimen/color_seed_chip_margin"
+            android:layout_marginBottom="@dimen/color_seed_chip_margin"
+            android:src="@drawable/color_chip_seed_filled2" />
+
+        <ImageView
+            android:id="@+id/color_preview_2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:layout_marginTop="@dimen/color_seed_chip_margin"
+            android:layout_marginEnd="@dimen/color_seed_chip_margin"
+            android:src="@drawable/color_chip_seed_filled1" />
+
+        <ImageView
+            android:id="@+id/color_preview_3"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:layout_marginStart="@dimen/color_seed_chip_margin"
+            android:layout_marginTop="@dimen/color_seed_chip_margin"
+            android:src="@drawable/color_chip_seed_filled3" />
+    </FrameLayout>
+</FrameLayout>
diff --git a/res/values/dimens.xml b/res/values/dimens.xml
index 2086480..34dac1d 100644
--- a/res/values/dimens.xml
+++ b/res/values/dimens.xml
@@ -123,4 +123,20 @@
 
     <dimen name="beta_tag_background_width">46dp</dimen>
     <dimen name="beta_tag_background_height">24dp</dimen>
+
+    <!-- Color section -->
+    <dimen name="color_option_tile_margin_horizontal">2dp</dimen>
+    <dimen name="color_option_tile_padding_bottom">11dp</dimen>
+    <dimen name="color_options_container_min_height">96dp</dimen>
+    <dimen name="color_options_container_top_margin">24dp</dimen>
+    <dimen name="color_seed_chip_margin">12dp</dimen>
+    <dimen name="color_seed_option_tile_padding">10dp</dimen>
+    <dimen name="color_seed_option_tile_padding_selected">6dp</dimen>
+    <dimen name="component_color_chip_container_medium_size">48dp</dimen>
+    <dimen name="component_color_chip_medium_size">48dp</dimen>
+    <dimen name="component_color_chip_small_size_default">24dp</dimen>
+    <dimen name="component_color_chip_small_size_selected">32dp</dimen>
+    <dimen name="option_tile_width_big">82dp</dimen>
+    <!--  Default page horizontal margin (24dp) - separated tabs inset horizontal (4dp) -->
+    <dimen name="separated_tabs_horizontal_margin">20dp</dimen>
 </resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index f2d0f21..cccc033 100755
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -247,4 +247,9 @@
 
     <!-- The content description of grid picker entry. [CHAR LIMIT=NONE] -->
     <string name="gird_picker_entry_content_description" msgid="7538418512525897691">Change app grid</string>
+
+    <string name="wallpaper_color_tab">Wallpaper colors</string>
+    <string name="wallpaper_color_title">Wallpaper color</string>
+    <string name="preset_color_tab">Basic colors</string>
+    <string name="color_changed">Color changed</string>
 </resources>
diff --git a/src/com/android/customization/model/color/ColorBundle.kt b/src/com/android/customization/model/color/ColorBundle.kt
new file mode 100644
index 0000000..42478cb
--- /dev/null
+++ b/src/com/android/customization/model/color/ColorBundle.kt
@@ -0,0 +1,59 @@
+package com.android.customization.model.color
+
+import android.annotation.SuppressLint
+import android.content.res.ColorStateList
+import android.content.res.Configuration
+import android.graphics.drawable.GradientDrawable
+import android.view.View
+import android.widget.ImageView
+import com.android.wallpaper.R
+
+class ColorBundle(
+    title: String?,
+    map: Map<String?, String?>?,
+    isDefault: Boolean,
+    index: Int,
+    private val mPreviewInfo: PreviewInfo
+) : ColorOption(
+    title!!, map!!, isDefault, index
+) {
+    class PreviewInfo(
+        val secondaryColorLight: Int,
+        val secondaryColorDark: Int,
+    )
+
+    @SuppressLint("UseCompatLoadingForDrawables")
+    override fun bindThumbnailTile(view: View) {
+        val resources = view.context.resources
+        val thumbnailView = view.findViewById<ImageView>(R.id.color_preview_icon)
+        val secondaryColor =
+            if ((resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK) == Configuration.UI_MODE_NIGHT_YES) mPreviewInfo.secondaryColorDark
+            else mPreviewInfo.secondaryColorLight
+        val gradientDrawable = view.resources.getDrawable(
+            R.drawable.color_chip_medium_filled, thumbnailView.context.theme
+        ) as GradientDrawable
+        if (secondaryColor != 0) {
+            gradientDrawable.setTintList(ColorStateList.valueOf(secondaryColor))
+        } else {
+            gradientDrawable.setTintList(ColorStateList.valueOf(resources.getColor(R.color.material_white_100)))
+        }
+        thumbnailView.setImageDrawable(gradientDrawable)
+        val context = view.context
+        if (mContentDescription == null) {
+            val string = context.getString(R.string.default_theme_title)
+            mContentDescription = if (mIsDefault) {
+                string
+            } else {
+                mTitle
+            }
+        }
+        view.contentDescription = mContentDescription
+    }
+
+    override fun getLayoutResId(): Int {
+        return R.layout.color_option
+    }
+
+    override val source: String
+        get() = "preset"
+}
diff --git a/src/com/android/customization/model/color/ColorCustomizationManager.kt b/src/com/android/customization/model/color/ColorCustomizationManager.kt
new file mode 100644
index 0000000..87ba029
--- /dev/null
+++ b/src/com/android/customization/model/color/ColorCustomizationManager.kt
@@ -0,0 +1,238 @@
+package com.android.customization.model.color
+
+import android.app.WallpaperColors
+import android.content.ContentResolver
+import android.content.Context
+import android.database.ContentObserver
+import android.net.Uri
+import android.os.Handler
+import android.os.Looper
+import android.os.SystemClock
+import android.provider.Settings
+import android.text.TextUtils
+import android.util.Log
+import com.android.wallpaper.R
+import com.android.customization.model.CustomizationManager
+import com.android.customization.model.CustomizationManager.OptionsFetchedListener
+import com.android.customization.picker.color.ColorSectionView
+import org.json.JSONException
+import org.json.JSONObject
+import java.util.concurrent.Executors
+
+class ColorCustomizationManager(
+    val mProvider: ColorOptionsProvider,
+    private val mContentResolver: ContentResolver
+) : CustomizationManager<ColorOption> {
+    var mCurrentOverlays: Map<String, String>? = null
+    private var mCurrentSource: String? = null
+    var mHomeWallpaperColors: WallpaperColors? = null
+    var mLockWallpaperColors: WallpaperColors? = null
+
+    companion object {
+        var COLOR_OVERLAY_SETTINGS: Set<String>? = null
+        private var sColorCustomizationManager: ColorCustomizationManager? = null
+        val sExecutorService = Executors.newSingleThreadExecutor()!!
+        fun getInstance(
+            context: Context
+        ): ColorCustomizationManager? {
+            if (sColorCustomizationManager == null) {
+                val applicationContext = context.applicationContext
+                sColorCustomizationManager = ColorCustomizationManager(
+                    ColorProvider(
+                        applicationContext, applicationContext.getString(
+                            R.string.themes_stub_package
+                        )
+                    ), applicationContext.contentResolver
+                )
+            }
+            return sColorCustomizationManager
+        }
+
+        init {
+            val hashSet = HashSet<String>()
+            COLOR_OVERLAY_SETTINGS = hashSet
+            hashSet.add("android.theme.customization.system_palette")
+            hashSet.add("android.theme.customization.accent_color")
+            hashSet.add("android.theme.customization.color_source")
+        }
+    }
+
+    init {
+        mContentResolver.registerContentObserver(Settings.Secure.CONTENT_URI, true, object :
+            ContentObserver(Handler(Looper.getMainLooper())) {
+            override fun onChange(selfChange: Boolean, uri: Uri?) {
+                super.onChange(selfChange, uri)
+                if (TextUtils.equals(
+                        uri!!.lastPathSegment,
+                        "theme_customization_overlay_packages"
+                    )
+                ) {
+                    mCurrentOverlays = null
+                }
+
+            }
+        })
+    }
+
+    val currentColorSource: String?
+        get() {
+            if (mCurrentSource == null) {
+                parseSettings(storedOverlays)
+            }
+            return mCurrentSource
+        }
+    val storedOverlays: String?
+         get() = Settings.Secure.getString(mContentResolver, "theme_customization_overlay_packages")
+
+    fun parseSettings(str: String?) {
+        val hashMap = HashMap<String, String>()
+        if (str != null) {
+            try {
+                val jSONObject = JSONObject(str)
+                val names = jSONObject.names()
+                if (names != null) {
+                    for (i in 0 until names.length()) {
+                        val string = names.getString(i)
+                        if ((COLOR_OVERLAY_SETTINGS as HashSet<String>?)!!.contains(string)) {
+                            try {
+                                hashMap[string] = jSONObject.getString(string)
+                            } catch (e: JSONException) {
+                                Log.e(
+                                    "ColorCustomizationManager",
+                                    "parseColorOverlays: " + e.localizedMessage,
+                                    e
+                                )
+                            }
+                        }
+                    }
+                }
+            } catch (e2: JSONException) {
+                Log.e("ColorCustomizationManager", e2.localizedMessage!!)
+            }
+        }
+        mCurrentSource = hashMap.remove("android.theme.customization.color_source")
+        mCurrentOverlays = hashMap
+    }
+
+    override fun isAvailable(): Boolean {
+        return true
+    }
+
+    fun setThemeBundle(colorSectionController: ColorSectionController, option: ColorOption) {
+        if (SystemClock.elapsedRealtime() - colorSectionController.mLastColorApplyingTime >= 500) {
+            colorSectionController.mLastColorApplyingTime = SystemClock.elapsedRealtime()
+            val callback: CustomizationManager.Callback = object : CustomizationManager.Callback {
+                override fun onError(th2: Throwable?) {
+                    Log.w("ColorSectionController", "Apply theme with error: null")
+                }
+
+                override fun onSuccess() {
+                    val colorSectionView: ColorSectionView =
+                        colorSectionController.mColorSectionView!!
+                    colorSectionView.announceForAccessibility(
+                        colorSectionView.context.getString(
+                            R.string.color_changed
+                        )
+                    )
+                    val wallpaperColors = colorSectionController.mLockWallpaperColors
+                    var i3 = 0
+                    val z2 =
+                        wallpaperColors == null || wallpaperColors == colorSectionController.mHomeWallpaperColors
+                    if (TextUtils.equals(option.source, "preset")) {
+                        i3 = 26
+                    } else if (z2) {
+                        i3 = 25
+                    } else {
+                        val source = option.source
+                        if (source == "lock_wallpaper") {
+                            i3 = 24
+                        } else if (source == "home_wallpaper") {
+                            i3 = 23
+                        }
+                    }
+                    colorSectionController.mEventLogger.logColorApplied(i3, option.mIndex)
+                }
+            }
+            sExecutorService.submit {
+                applyBundle(option, callback)
+            }
+            return
+        }
+    }
+
+    private fun applyBundle(option: ColorOption, callback: CustomizationManager.Callback) {
+        var mStoredOverlays = storedOverlays
+        if (TextUtils.isEmpty(mStoredOverlays) || mStoredOverlays == null) {
+            mStoredOverlays = "{}"
+        }
+        var z4: Boolean
+        var jSONObject: JSONObject? = null
+        try {
+            jSONObject = JSONObject(mStoredOverlays)
+            try {
+                val jsonPackages: JSONObject = option.getJsonPackages(true)
+                val it: Iterator<*> =
+                    (COLOR_OVERLAY_SETTINGS as HashSet?)!!.iterator()
+                while (it.hasNext()) {
+                    jSONObject.remove(it.next() as String?)
+                }
+                val keys: Iterator<String> = jsonPackages.keys()
+                while (keys.hasNext()) {
+                    val next = keys.next()
+                    jSONObject.put(next, jsonPackages.get(next))
+                }
+                jSONObject.put(
+                    "android.theme.customization.color_source",
+                    option.source
+                )
+                jSONObject.put(
+                    "android.theme.customization.color_index",
+                    option.mIndex.toString()
+                )
+                if ("preset" != option.source) {
+                    val wallpaperColors = mLockWallpaperColors
+                    if (wallpaperColors != null && wallpaperColors != mHomeWallpaperColors) {
+                        z4 = false
+                        jSONObject.put(
+                            "android.theme.customization.color_both",
+                            if (!z4) "1" else "0"
+                        )
+                    }
+                    z4 = true
+                    jSONObject.put(
+                        "android.theme.customization.color_both",
+                        if (!z4) "1" else "0"
+                    )
+                } else {
+                    jSONObject.remove("android.theme.customization.color_both")
+                }
+            } catch (e2: JSONException) {
+                e2.printStackTrace()
+                Handler(Looper.getMainLooper()).post {
+                    val success = Settings.Secure.putString(
+                        mContentResolver,
+                        "theme_customization_overlay_packages", jSONObject.toString()
+                    )
+                    if (success) callback.onSuccess()
+                    else callback.onError(null)
+                }
+                return
+            }
+        } catch (e3: JSONException) {
+            e3.printStackTrace()
+        }
+        Handler(Looper.getMainLooper()).post {
+            val success = jSONObject != null && Settings.Secure.putString(
+                mContentResolver,
+                "theme_customization_overlay_packages", jSONObject.toString()
+            )
+            if (success) callback.onSuccess()
+            else callback.onError(null)
+        }
+    }
+
+    override fun apply(option: ColorOption, callback: CustomizationManager.Callback) {
+        applyBundle(option, callback)
+    }
+    override fun fetchOptions(callback: OptionsFetchedListener<ColorOption>, reload: Boolean) {}
+}
diff --git a/src/com/android/customization/model/color/ColorOption.kt b/src/com/android/customization/model/color/ColorOption.kt
new file mode 100644
index 0000000..d9cb294
--- /dev/null
+++ b/src/com/android/customization/model/color/ColorOption.kt
@@ -0,0 +1,97 @@
+package com.android.customization.model.color
+
+import android.text.TextUtils
+import android.util.Log
+import com.android.customization.model.CustomizationManager
+import com.android.customization.model.CustomizationOption
+import org.json.JSONException
+import org.json.JSONObject
+import java.util.*
+import java.util.stream.Collectors
+
+abstract class ColorOption(
+    val mTitle: String,
+    map: Map<String?, String?>,
+    val mIsDefault: Boolean,
+    val mIndex: Int
+) : CustomizationOption<ColorOption> {
+    var mContentDescription: CharSequence? = null
+    private val mPackagesByCategory: Map<String?, String?>
+
+    fun getJsonPackages(z: Boolean): JSONObject {
+        val jSONObject: JSONObject = if (mIsDefault) {
+            JSONObject()
+        } else {
+            val jSONObject2 = JSONObject(mPackagesByCategory)
+            val keys = jSONObject2.keys()
+            val hashSet: HashSet<String> = HashSet<String>()
+            while (keys.hasNext()) {
+                val next = keys.next()
+                if (jSONObject2.isNull(next)) {
+                    hashSet.add(next)
+                }
+            }
+            val it: Iterator<*> = hashSet.iterator()
+            while (it.hasNext()) {
+                jSONObject2.remove(it.next() as String?)
+            }
+            jSONObject2
+        }
+        if (z) {
+            try {
+                jSONObject.put(TIMESTAMP_FIELD, System.currentTimeMillis())
+            } catch (unused: JSONException) {
+                Log.e("ColorOption", "Couldn't add timestamp to serialized themebundle")
+            }
+        }
+        return jSONObject
+    }
+
+    abstract val source: String
+
+    override fun getTitle(): String {
+        return mTitle
+    }
+
+    override fun isActive(customizationManager: CustomizationManager<ColorOption>): Boolean {
+        val colorCustomizationManager = customizationManager as ColorCustomizationManager
+        if (mIsDefault) {
+            val storedOverlays = colorCustomizationManager.storedOverlays
+            if (!TextUtils.isEmpty(storedOverlays) && "{}" != storedOverlays) {
+                if (colorCustomizationManager.mCurrentOverlays == null) {
+                    colorCustomizationManager.parseSettings(colorCustomizationManager.storedOverlays)
+                }
+                if (colorCustomizationManager.mCurrentOverlays!!.isNotEmpty() &&
+                    (storedOverlays!!.contains("android.theme.customization.system_palette") ||
+                     storedOverlays.contains("android.theme.customization.accent_color"))
+                ) {
+                    return false
+                }
+            }
+            return true
+        }
+        if (colorCustomizationManager.mCurrentOverlays == null) {
+            colorCustomizationManager.parseSettings(colorCustomizationManager.storedOverlays)
+        }
+        val map = colorCustomizationManager.mCurrentOverlays
+        val currentColorSource = colorCustomizationManager.currentColorSource
+        return (TextUtils.isEmpty(currentColorSource) || source == currentColorSource) && mPackagesByCategory == map
+    }
+
+    companion object {
+        const val TIMESTAMP_FIELD = "_applied_timestamp"
+    }
+
+    init {
+        mPackagesByCategory = Collections.unmodifiableMap(
+            map.entries.stream().filter { t -> t.value != null }
+                .collect(
+                    Collectors.toMap(
+                        { t -> t.key },
+                        { t -> t.value }
+                    )
+                ) as Map<String?, String?>
+        )
+
+    }
+}
diff --git a/src/com/android/customization/model/color/ColorOptionsProvider.kt b/src/com/android/customization/model/color/ColorOptionsProvider.kt
new file mode 100644
index 0000000..aee9fab
--- /dev/null
+++ b/src/com/android/customization/model/color/ColorOptionsProvider.kt
@@ -0,0 +1,3 @@
+package com.android.customization.model.color
+
+interface ColorOptionsProvider 
diff --git a/src/com/android/customization/model/color/ColorProvider.kt b/src/com/android/customization/model/color/ColorProvider.kt
new file mode 100644
index 0000000..cfe95a4
--- /dev/null
+++ b/src/com/android/customization/model/color/ColorProvider.kt
@@ -0,0 +1,241 @@
+package com.android.customization.model.color
+
+import android.app.WallpaperColors
+import android.content.Context
+import android.content.res.ColorStateList
+import android.util.Log
+import androidx.core.graphics.ColorUtils
+import com.android.customization.model.ResourcesApkProvider
+import com.android.wallpaper.compat.WallpaperManagerCompat
+import com.android.wallpaper.module.InjectorProvider
+import com.android.systemui.monet.ColorScheme
+import com.android.customization.model.color.ColorUtils.toColorString
+import kotlinx.coroutines.CoroutineScope
+import java.util.*
+import kotlin.collections.ArrayList
+import kotlin.collections.HashMap
+
+class ColorProvider(context: Context, stubPackageName: String) :
+    ResourcesApkProvider(context, stubPackageName), ColorOptionsProvider {
+    var colorBundles: List<ColorOption>? = null
+    var homeWallpaperColors: WallpaperColors? = null
+    var lockWallpaperColors: WallpaperColors? = null
+    val scope: CoroutineScope? = null
+    private fun buildBundle(
+        seed: Int,
+        index: Int,
+        mIsDefault: Boolean,
+        source: String?,
+        list: ArrayList<ColorOption>
+    ) {
+
+        val hashMap: HashMap<String?, String?> = HashMap()
+        val colorScheme = ColorScheme(seed, false)
+        val colorSchemeDark = ColorScheme(seed, true)
+        val secondaryColorLight = intArrayOf(
+            ColorUtils.setAlphaComponent(colorScheme.accent1[2], 255), ColorUtils.setAlphaComponent(
+                colorScheme.accent1[2], 255
+            ), ColorStateList.valueOf(
+                colorScheme.accent3[6]
+            ).withLStar(85.0f).colors[0], ColorUtils.setAlphaComponent(
+                colorScheme.accent1[6], 255
+            )
+        )
+        val secondaryColorDark = intArrayOf(
+            ColorUtils.setAlphaComponent(colorSchemeDark.accent1[2], 255),
+            ColorUtils.setAlphaComponent(
+                colorSchemeDark.accent1[2], 255
+            ),
+            ColorStateList.valueOf(
+                colorSchemeDark.accent3[6]
+            ).withLStar(85.0f).colors[0],
+            ColorUtils.setAlphaComponent(
+                colorSchemeDark.accent1[6], 255
+            )
+        )
+        var source3 = ""
+        val source2 = if (mIsDefault) {
+            source3
+        } else {
+            toColorString(seed)
+        }
+        hashMap["android.theme.customization.system_palette"] = source2
+        if (!mIsDefault) {
+            source3 = toColorString(seed)
+        }
+        hashMap["android.theme.customization.accent_color"] = source3
+        list.add(
+            ColorSeedOption(
+                source,
+                hashMap,
+                mIsDefault,
+                source!!,
+                1 + index,
+                ColorSeedOption.PreviewInfo(secondaryColorLight, secondaryColorDark)
+            )
+        )
+    }
+
+    private fun loadPreset() {
+        val bundlesList = ArrayList<String>()
+        val bundleNames = mStubApkResources.getStringArray(
+            mStubApkResources.getIdentifier(
+                "color_bundles",
+                "array",
+                mStubPackageName
+            )
+        )
+        for (i in bundleNames.indices) {
+            if (i == 4) break
+            bundlesList.add(bundleNames[i])
+        }
+        val colorPresetBundles = ArrayList<ColorOption>()
+        var position = 1;
+        for (bundle in bundlesList) {
+            val hashMap: HashMap<String?, String?> = HashMap()
+            val bundleName = getItemStringFromStub("bundle_name_", bundle)
+            val bundleColorPrimary = getItemColorFromStub("color_primary_", bundle)
+            val bundleColorSecondary = getItemColorFromStub("color_secondary_", bundle)
+            hashMap["android.theme.customization.system_palette"] =
+                toColorString(bundleColorSecondary)
+            hashMap["android.theme.customization.accent_color"] = toColorString(bundleColorPrimary)
+            val accentColor = ColorScheme(bundleColorPrimary, false).accentColor
+            val accentColor2 = ColorScheme(bundleColorPrimary, true).accentColor
+            colorPresetBundles.add(
+                ColorBundle(
+                    bundleName,
+                    hashMap,
+                    false,
+                    index = position,
+                    mPreviewInfo = ColorBundle.PreviewInfo(
+                        accentColor,
+                        accentColor2
+                    )
+                )
+            )
+            position++
+        }
+        this.colorBundles = colorPresetBundles
+    }
+
+    fun buildColorSeeds(
+        wallpaperColors: WallpaperColors,
+        count: Int,
+        source: String?,
+        isDefault: Boolean,
+        list: ArrayList<ColorOption>
+    ) {
+        val list2: List<Int>
+        val list3: List<Int>
+        val seedColors: List<Int> = ColorScheme.getSeedColors(wallpaperColors)
+        loadPreset()
+        buildBundle(
+            seedColors[0],
+            0,
+            isDefault,
+            source,
+            list
+        )
+        val size = seedColors.size - 1
+        list2 = if (size <= 0) {
+            ArrayList()
+        } else if (size != 1) {
+            val arrayList: ArrayList<Int> = ArrayList(size)
+            val listIterator = seedColors.listIterator(1)
+            while (listIterator.hasNext()) {
+                arrayList.add(listIterator.next())
+            }
+            arrayList
+        } else if (seedColors.isNotEmpty()) {
+            listOf(seedColors[seedColors.size - 1])
+        } else {
+            throw NoSuchElementException("List is empty.")
+        }
+        val i3 = count - 1
+        var index4 = 0
+        if (i3 >= 0) {
+            list3 = if (i3 == 0) {
+                ArrayList()
+            } else (if (i3 >= list2.size) {
+                list2
+            } else if (i3 == 1) {
+                listOf(list2[0])
+            } else {
+                val arrayList2: ArrayList<Int> = ArrayList(i3)
+                var i5 = 0
+                for (obj in list2) {
+                    arrayList2.add(obj)
+                    i5++
+                    if (i5 == i3) {
+                        break
+                    }
+                }
+                arrayList2
+            })
+            for (seed in list3) {
+                index4++
+                buildBundle(seed, index4, false, source, list)
+            }
+            return
+        }
+        throw IllegalArgumentException("Requested element count $i3 is less than zero.")
+    }
+
+    companion object {
+
+        fun loadSeedColors(
+            colorProvider: ColorProvider,
+            wallpaperColors: WallpaperColors?,
+            wallpaperColors2: WallpaperColors?
+        ) {
+            val arrayList = ArrayList<ColorOption>()
+            if (wallpaperColors != null) {
+                val count = if (wallpaperColors2 == null) 4 else 2
+                if (wallpaperColors2 != null) {
+                    val wallpaperManagerCompat: WallpaperManagerCompat =
+                        InjectorProvider.getInjector()
+                            .getWallpaperManagerCompat(colorProvider.mContext)
+                    var isDefault = true
+                    if (wallpaperManagerCompat.getWallpaperId(WallpaperManagerCompat.FLAG_LOCK) <= wallpaperManagerCompat.getWallpaperId(
+                            WallpaperManagerCompat.FLAG_SYSTEM
+                        )
+                    ) {
+                        isDefault = false
+                    }
+                    colorProvider.buildColorSeeds(
+                        if (isDefault) wallpaperColors2 else wallpaperColors,
+                        count,
+                        if (isDefault) "lock_wallpaper" else "home_wallpaper",
+                        true,
+                        arrayList
+                    )
+                    colorProvider.buildColorSeeds(
+                        if (isDefault) wallpaperColors else wallpaperColors2,
+                        count,
+                        if (isDefault) "home_wallpaper" else "lock_wallpaper",
+                        false,
+                        arrayList
+                    )
+                } else {
+                    colorProvider.buildColorSeeds(
+                        wallpaperColors,
+                        count,
+                        "home_wallpaper",
+                        true,
+                        arrayList
+                    )
+                }
+                val list = colorProvider.colorBundles
+                val arrayList2 = ArrayList<ColorOption>()
+                if (list != null) {
+                    for (t in list) {
+                        arrayList2.add(t)
+                    }
+                }
+                arrayList.addAll(arrayList2)
+                colorProvider.colorBundles = arrayList
+            }
+        }
+    }
+
+}
diff --git a/src/com/android/customization/model/color/ColorSectionController.kt b/src/com/android/customization/model/color/ColorSectionController.kt
new file mode 100644
index 0000000..39e761f
--- /dev/null
+++ b/src/com/android/customization/model/color/ColorSectionController.kt
@@ -0,0 +1,259 @@
+package com.android.customization.model.color
+
+import android.app.Activity
+import android.app.WallpaperColors
+import android.content.Context
+import android.os.Bundle
+import android.os.Handler
+import android.os.Looper
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.LinearLayout
+import androidx.lifecycle.LifecycleOwner
+import androidx.lifecycle.lifecycleScope
+import androidx.recyclerview.widget.RecyclerView
+import androidx.viewpager2.widget.ViewPager2
+import com.android.customization.model.CustomizationManager
+import com.android.customization.module.CustomizationInjector
+import com.android.customization.module.ThemesUserEventLogger
+import com.android.customization.widget.OptionSelectorController
+import com.android.wallpaper.R
+import com.android.wallpaper.model.CustomizationSectionController;
+import com.android.wallpaper.model.CustomizationSectionController.CustomizationSectionNavigationController;
+import com.android.wallpaper.module.InjectorProvider
+import com.android.wallpaper.widget.SeparatedTabLayout
+import com.android.wallpaper.model.WallpaperColorsViewModel
+import com.android.customization.picker.color.ColorSectionView
+import kotlinx.coroutines.launch
+
+
+class ColorSectionController(
+    activity: Activity?,
+    wallpaperColorsViewModel: WallpaperColorsViewModel,
+    lifecycleOwner: LifecycleOwner,
+    bundle: Bundle?,
+    private val navigationController: CustomizationSectionNavigationController
+) : CustomizationSectionController<ColorSectionView?> {
+
+    val mColorManager: ColorCustomizationManager
+    var mColorSectionView: ColorSectionView? = null
+    private var mColorSectionAdapter = ColorSectionAdapter()
+    private lateinit var mColorViewPager: ViewPager2
+    val mEventLogger: ThemesUserEventLogger
+    var mHomeWallpaperColors: WallpaperColors? = null
+    private var mHomeWallpaperColorsReady = false
+    private val mLifecycleOwner: LifecycleOwner
+    var mLockWallpaperColors: WallpaperColors? = null
+    private var mLockWallpaperColorsReady = false
+    val mPresetColorOptions: MutableList<ColorOption?> = ArrayList()
+    var mSelectedColor: ColorOption? = null
+    private var mTabLayout: SeparatedTabLayout? = null
+    private var mTabPositionToRestore: Int? = null
+    val mWallpaperColorOptions: MutableList<ColorOption?> = ArrayList()
+    private val mWallpaperColorsViewModel: WallpaperColorsViewModel
+    var mLastColorApplyingTime: Long = 0
+
+
+    inner class ColorSectionAdapter :
+        RecyclerView.Adapter<RecyclerView.ViewHolder>() {
+        private val mItemCounts = 2
+
+        inner class ColorOptionsViewHolder(view: View) :
+            RecyclerView.ViewHolder(
+                view
+            )
+
+        override fun getItemCount(): Int {
+            return mItemCounts
+        }
+
+        override fun getItemViewType(i: Int): Int {
+            return R.layout.color_options_view
+        }
+
+        override fun onBindViewHolder(viewHolder: RecyclerView.ViewHolder, position: Int) {
+            val view = viewHolder.itemView as? RecyclerView ?: return
+            val colorSectionController = this@ColorSectionController
+            val colorOptions =
+                if (position == 0) colorSectionController.mWallpaperColorOptions
+                else colorSectionController.mPresetColorOptions
+            val optionSelectorController = OptionSelectorController(
+                view,
+                colorOptions,
+                true,
+                OptionSelectorController.CheckmarkStyle.CENTER
+            )
+            optionSelectorController.initOptions(colorSectionController.mColorManager)
+            colorSectionController.setUpColorOptionsController(optionSelectorController)
+        }
+
+        override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): RecyclerView.ViewHolder {
+            return ColorOptionsViewHolder(
+                LayoutInflater.from(viewGroup.context).inflate(i, viewGroup, false)
+            )
+        }
+    }
+
+    override fun createView(context: Context): ColorSectionView {
+        mColorSectionView = LayoutInflater.from(context)
+            .inflate(R.layout.color_section_view, null as ViewGroup?) as ColorSectionView
+        mColorViewPager = mColorSectionView!!.requireViewById<ViewPager2>(R.id.color_view_pager)
+        mTabLayout = mColorSectionView!!.requireViewById(R.id.separated_tabs)
+        mTabLayout!!.setViewPager(mColorViewPager)
+        mWallpaperColorsViewModel.homeWallpaperColors.observe(mLifecycleOwner) {
+            mHomeWallpaperColors = it
+            mHomeWallpaperColorsReady = true
+            maybeLoadColors()
+        }
+
+        mWallpaperColorsViewModel.lockWallpaperColors.observe(mLifecycleOwner) {
+            mLockWallpaperColors = it
+            mLockWallpaperColorsReady = true
+            maybeLoadColors()
+        }
+
+        mLifecycleOwner.lifecycleScope.launchWhenResumed {
+            mTabPositionToRestore?.let { mColorViewPager.setCurrentItem(it, false) }
+        }
+
+        return mColorSectionView!!
+    }
+
+    override fun isAvailable(context: Context?): Boolean {
+        return context != null && ColorUtils.isMonetEnabled(context)
+    }
+
+    private fun maybeLoadColors() {
+        if (mHomeWallpaperColorsReady && mLockWallpaperColorsReady) {
+            val wallpaperColors = mHomeWallpaperColors
+            var wallpaperColors2 = mLockWallpaperColors
+            mColorManager.mHomeWallpaperColors = wallpaperColors
+            mColorManager.mLockWallpaperColors = wallpaperColors2
+            val optionsFetcher =
+                object : CustomizationManager.OptionsFetchedListener<ColorOption?> {
+                    override fun onError(th: Throwable?) {
+                        if (th != null) {
+                            Log.e("ColorSectionController", "Error loading theme bundles", th)
+                        }
+                    }
+
+                    override fun onOptionsLoaded(list: List<ColorOption?>) {
+                        if (list.isNotEmpty()) {
+                            var colorOption: ColorOption?
+                            val colorOption2: ColorOption
+                            mWallpaperColorOptions.clear()
+                            mPresetColorOptions.clear()
+                            for (colorOption3 in list) {
+                                if (colorOption3 is ColorSeedOption) {
+                                    mWallpaperColorOptions.add(colorOption3)
+                                } else if (colorOption3 is ColorBundle) {
+                                    mPresetColorOptions.add(colorOption3)
+                                }
+                            }
+                            val allColors = ArrayList<ColorOption?>()
+                            allColors.addAll(mWallpaperColorOptions)
+                            allColors.addAll(mPresetColorOptions)
+                            val iterator = allColors.iterator()
+                            while (true) {
+                                if (!iterator.hasNext()) {
+                                    colorOption = null
+                                    break
+                                }
+                                colorOption = iterator.next()
+                                if (colorOption!!.isActive(mColorManager)) {
+                                    break
+                                }
+                            }
+                            if (colorOption == null) {
+                                colorOption2 =
+                                    (if (mWallpaperColorOptions.isEmpty()) mPresetColorOptions[0]!! else mWallpaperColorOptions[0]!!)
+                                colorOption = colorOption2
+                            }
+                            mSelectedColor = colorOption
+                            mColorViewPager.post {
+                                if (mColorViewPager.adapter == null)
+                                    mColorViewPager.setAdapter(mColorSectionAdapter)
+                                mColorViewPager.adapter?.notifyItemChanged(0)
+                                if (mTabLayout != null && mTabLayout!!.tabCount == 0) {
+                                    val newTab = mTabLayout!!.newTab()
+                                    newTab.setText(R.string.wallpaper_color_tab)
+                                    mTabLayout!!.addTab(newTab, 0, mTabLayout!!.tabCount == 0)
+                                    val newTab2 = mTabLayout!!.newTab()
+                                    newTab2.setText(R.string.preset_color_tab)
+                                    mTabLayout!!.addTab(newTab2, 1, mTabLayout!!.tabCount == 0)
+                                }
+                                if (mWallpaperColorOptions.isEmpty()) {
+                                    mTabLayout!!.getTabAt(0)!!.view.isEnabled = false
+                                    mColorViewPager.setCurrentItem(1, false)
+                                }
+                                mColorViewPager.setCurrentItem(
+                                    if ("preset" == mColorManager.currentColorSource) 1 else 0,
+                                    false
+                                )
+                            }
+                        }
+                    }
+                }
+            if (wallpaperColors2 != null && wallpaperColors2 == wallpaperColors) {
+                wallpaperColors2 = null
+            }
+            val wallpaperColors3 = mColorManager.mHomeWallpaperColors
+            val colorProvider = mColorManager.mProvider as ColorProvider
+            val wallpapersColorsChanged = (colorProvider.homeWallpaperColors != wallpaperColors3
+                    ) || (colorProvider.lockWallpaperColors != wallpaperColors2)
+            if (wallpapersColorsChanged) {
+                colorProvider.homeWallpaperColors = wallpaperColors3
+                colorProvider.lockWallpaperColors = wallpaperColors2
+            }
+            val list = colorProvider.colorBundles
+            if (list == null || wallpapersColorsChanged) {
+                mLifecycleOwner.lifecycleScope.launch {
+                    if (wallpapersColorsChanged) {
+                        ColorProvider.loadSeedColors(
+                            colorProvider,
+                            wallpaperColors3,
+                            wallpaperColors2
+                        )
+                    }
+                    optionsFetcher.onOptionsLoaded(colorProvider.colorBundles!!)
+                }
+            } else {
+                optionsFetcher.onOptionsLoaded(list)
+            }
+        }
+    }
+
+    fun setUpColorOptionsController(optionSelectorController: OptionSelectorController<ColorOption>) {
+        if (mSelectedColor != null && optionSelectorController.containsOption(mSelectedColor)) {
+            optionSelectorController.setSelectedOption(mSelectedColor)
+        }
+        optionSelectorController.addListener {
+            if (mSelectedColor != it) {
+                mSelectedColor = (it as ColorOption)
+                Handler(Looper.getMainLooper()).postDelayed({
+                    mColorManager.setThemeBundle(this, it)
+                }, 100L)
+                return@addListener
+            }
+        }
+    }
+
+    override fun onSaveInstanceState(bundle: Bundle) {
+        if (this::mColorViewPager.isInitialized)
+            bundle.putInt("COLOR_TAB_POSITION", mColorViewPager.currentItem)
+    }
+
+    init {
+        mEventLogger =
+            (InjectorProvider.getInjector() as CustomizationInjector).getUserEventLogger(activity) as ThemesUserEventLogger
+        mColorManager =
+            ColorCustomizationManager.getInstance(activity!!)!!
+        mWallpaperColorsViewModel = wallpaperColorsViewModel
+        mLifecycleOwner = lifecycleOwner
+        if (bundle != null && bundle.containsKey("COLOR_TAB_POSITION")) {
+            mTabPositionToRestore = bundle.getInt("COLOR_TAB_POSITION")
+        }
+    }
+}
diff --git a/src/com/android/customization/model/color/ColorSeedOption.kt b/src/com/android/customization/model/color/ColorSeedOption.kt
new file mode 100644
index 0000000..4a5b178
--- /dev/null
+++ b/src/com/android/customization/model/color/ColorSeedOption.kt
@@ -0,0 +1,56 @@
+package com.android.customization.model.color
+
+import android.content.res.Configuration
+import android.graphics.PorterDuff
+import android.view.View
+import android.widget.ImageView
+import com.android.wallpaper.R
+
+class ColorSeedOption(
+    title: String?,
+    map: Map<String?, String?>?,
+    isDefault: Boolean,
+    override val source: String,
+    index: Int,
+    private val mPreviewInfo: PreviewInfo
+) : ColorOption(
+    title!!, map!!, isDefault, index
+) {
+    private val mPreviewColorIds = intArrayOf(
+        R.id.color_preview_0,
+        R.id.color_preview_1,
+        R.id.color_preview_2,
+        R.id.color_preview_3
+    )
+
+    override fun bindThumbnailTile(view: View) {
+        val padding: Int
+        val resources = view.context.resources
+        var iterator = 0
+        val mPreviewColorTint =
+            if ((resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK) == Configuration.UI_MODE_NIGHT_YES) mPreviewInfo.darkColors else mPreviewInfo.lightColors
+        padding = if (view.isActivated) {
+            resources.getDimensionPixelSize(R.dimen.color_seed_option_tile_padding_selected)
+        } else {
+            resources.getDimensionPixelSize(R.dimen.color_seed_option_tile_padding)
+        }
+        while (true) {
+            if (iterator < mPreviewColorIds.size) {
+                val imageView = view.findViewById<View>(mPreviewColorIds[iterator]) as ImageView
+                imageView.drawable.setColorFilter(mPreviewColorTint[iterator], PorterDuff.Mode.SRC)
+                imageView.setPadding(padding, padding, padding, padding)
+                iterator++
+            } else {
+                view.contentDescription =
+                    view.context.getString(R.string.wallpaper_color_title)
+                return
+            }
+        }
+    }
+
+    override fun getLayoutResId(): Int {
+        return R.layout.color_seed_option
+    }
+
+    class PreviewInfo(var lightColors: IntArray, var darkColors: IntArray)
+}
diff --git a/src/com/android/customization/model/color/ColorUtils.java b/src/com/android/customization/model/color/ColorUtils.java
new file mode 100644
index 0000000..ea84861
--- /dev/null
+++ b/src/com/android/customization/model/color/ColorUtils.java
@@ -0,0 +1,47 @@
+package com.android.customization.model.color;
+
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.res.Resources;
+import android.os.SystemProperties;
+import android.util.Log;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+public final class ColorUtils {
+    public static int sFlagId;
+    @Nullable
+    public static Resources sSysuiRes;
+
+    public static boolean isMonetEnabled(@NonNull Context context) {
+        boolean monet = SystemProperties.getBoolean("persist.systemui.flag_monet", false);
+        if (monet) {
+            return true;
+        }
+        if (sSysuiRes == null) {
+            try {
+                PackageManager packageManager = context.getPackageManager();
+                ApplicationInfo applicationInfo = packageManager.getApplicationInfo(
+                        "com.android.systemui", 0);
+                if (applicationInfo != null) {
+                    sSysuiRes = packageManager.getResourcesForApplication(applicationInfo);
+                }
+            } catch (PackageManager.NameNotFoundException e) {
+                Log.w("ColorUtils", "Couldn't read color flag, skipping section", e);
+            }
+        }
+        if (sFlagId == 0 && sSysuiRes != null) {
+            sFlagId = sSysuiRes.getIdentifier("flag_monet", "bool", "com.android.systemui");
+        }
+        if (sFlagId <= 0) {
+            return false;
+        }
+        return sSysuiRes.getBoolean(sFlagId);
+    }
+
+    public static String toColorString(int color) {
+        return String.format("#%06X", color & 0x00ffffff);
+    }
+}
diff --git a/src/com/android/customization/model/color/WallpaperColorResources.kt b/src/com/android/customization/model/color/WallpaperColorResources.kt
new file mode 100644
index 0000000..7217577
--- /dev/null
+++ b/src/com/android/customization/model/color/WallpaperColorResources.kt
@@ -0,0 +1,26 @@
+package com.android.customization.model.color
+
+import android.app.WallpaperColors
+import android.util.SparseIntArray
+import com.android.systemui.monet.ColorScheme
+
+class WallpaperColorResources(wallpaperColors: WallpaperColors?) {
+    val colorOverlay = SparseIntArray()
+
+    fun addOverlayColor(list: List<Int>, i: Int) {
+        var i = i
+        for (num in list) {
+            colorOverlay.put(i, num)
+            i++
+        }
+    }
+
+    init {
+        val colorScheme = ColorScheme(wallpaperColors!!, false)
+        addOverlayColor(colorScheme.neutral1, android.R.color.system_neutral1_10)
+        addOverlayColor(colorScheme.neutral2, android.R.color.system_neutral2_10)
+        addOverlayColor(colorScheme.accent1, android.R.color.system_accent1_10)
+        addOverlayColor(colorScheme.accent2, android.R.color.system_accent2_10)
+        addOverlayColor(colorScheme.accent3, android.R.color.system_accent3_10)
+    }
+}
diff --git a/src/com/android/customization/module/DefaultCustomizationInjector.java b/src/com/android/customization/module/DefaultCustomizationInjector.java
index c906281..9fdff95 100644
--- a/src/com/android/customization/module/DefaultCustomizationInjector.java
+++ b/src/com/android/customization/module/DefaultCustomizationInjector.java
@@ -18,6 +18,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
+import android.os.Bundle;
 
 import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentActivity;
@@ -26,6 +27,7 @@
 import com.android.customization.model.theme.ThemeBundleProvider;
 import com.android.customization.model.theme.ThemeManager;
 import com.android.wallpaper.model.CategoryProvider;
+import com.android.wallpaper.model.LiveWallpaperInfo;
 import com.android.wallpaper.model.WallpaperInfo;
 import com.android.wallpaper.module.BaseWallpaperInjector;
 import com.android.wallpaper.module.CustomizationSections;
@@ -35,8 +37,16 @@
 import com.android.wallpaper.module.WallpaperRotationRefresher;
 import com.android.wallpaper.monitor.PerformanceMonitor;
 import com.android.wallpaper.picker.CustomizationPickerActivity;
+import com.android.wallpaper.picker.ImageWallpaperColorThemePreviewFragment;
+import com.android.wallpaper.picker.LiveWallpaperColorThemePreviewFragment;
 import com.android.wallpaper.picker.PreviewFragment;
 
+import static com.android.wallpaper.picker.PreviewFragment.ARG_FULL_SCREEN;
+import static com.android.wallpaper.picker.PreviewFragment.ARG_PREVIEW_MODE;
+import static com.android.wallpaper.picker.PreviewFragment.ARG_TESTING_MODE_ENABLED;
+import static com.android.wallpaper.picker.PreviewFragment.ARG_VIEW_AS_HOME;
+import static com.android.wallpaper.picker.PreviewFragment.ARG_WALLPAPER;
+
 public class DefaultCustomizationInjector extends BaseWallpaperInjector
         implements CustomizationInjector {
     private CategoryProvider mCategoryProvider;
@@ -97,8 +107,17 @@
             boolean viewAsHome,
             boolean viewFullScreen,
             boolean testingModeEnabled) {
-        return PreviewFragment.newInstance(wallpaperInfo, mode, viewAsHome, viewFullScreen,
-                testingModeEnabled);
+        Bundle args = new Bundle();
+        args.putParcelable(ARG_WALLPAPER, wallpaperInfo);
+        args.putInt(ARG_PREVIEW_MODE, mode);
+        args.putBoolean(ARG_VIEW_AS_HOME, viewAsHome);
+        args.putBoolean(ARG_TESTING_MODE_ENABLED, testingModeEnabled);
+
+        PreviewFragment fragment = wallpaperInfo instanceof LiveWallpaperInfo
+                ? new LiveWallpaperColorThemePreviewFragment()
+                : new ImageWallpaperColorThemePreviewFragment();
+        fragment.setArguments(args);
+        return fragment;
     }
 
     @Override
diff --git a/src/com/android/customization/module/DefaultCustomizationSections.java b/src/com/android/customization/module/DefaultCustomizationSections.java
index a4510ea..ebb1015 100644
--- a/src/com/android/customization/module/DefaultCustomizationSections.java
+++ b/src/com/android/customization/module/DefaultCustomizationSections.java
@@ -20,6 +20,8 @@
 import com.android.wallpaper.model.WorkspaceViewModel;
 import com.android.wallpaper.module.CustomizationSections;
 
+import com.android.customization.model.color.ColorSectionController;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -41,6 +43,11 @@
                 workspaceViewModel, sectionNavigationController, wallpaperPreviewNavigator,
                 savedInstanceState));
 
+        // Color section
+        sectionControllers.add(
+            new ColorSectionController(activity, wallpaperColorsViewModel, lifecycleOwner,
+                savedInstanceState, sectionNavigationController));
+
         // Dark/Light theme section.
         sectionControllers.add(new DarkModeSectionController(activity,
                 lifecycleOwner.getLifecycle()));
diff --git a/src/com/android/customization/picker/color/ColorSectionView.kt b/src/com/android/customization/picker/color/ColorSectionView.kt
new file mode 100644
index 0000000..dce45de
--- /dev/null
+++ b/src/com/android/customization/picker/color/ColorSectionView.kt
@@ -0,0 +1,8 @@
+package com.android.customization.picker.color
+
+import android.content.Context
+import android.util.AttributeSet
+import com.android.wallpaper.picker.SectionView
+
+class ColorSectionView(context: Context?, attributeSet: AttributeSet?) :
+    SectionView(context, attributeSet)
diff --git a/src_override/com/android/wallpaper/picker/ImageWallpaperColorThemePreviewFragment.java b/src_override/com/android/wallpaper/picker/ImageWallpaperColorThemePreviewFragment.java
new file mode 100644
index 0000000..9165df7
--- /dev/null
+++ b/src_override/com/android/wallpaper/picker/ImageWallpaperColorThemePreviewFragment.java
@@ -0,0 +1,80 @@
+package com.android.wallpaper.picker;
+
+import android.app.WallpaperColors;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.SurfaceView;
+import android.view.ViewGroup;
+import android.widget.RemoteViews;
+
+import com.android.customization.model.color.WallpaperColorResources;
+import com.android.wallpaper.R;
+import com.android.wallpaper.widget.LockScreenPreviewer;
+
+import com.google.android.material.resources.MaterialAttributes;
+import com.google.android.material.tabs.TabLayout;
+
+public class ImageWallpaperColorThemePreviewFragment extends ImagePreviewFragment implements
+        WallpaperColorThemePreview {
+    private boolean mIgnoreInitialColorChange;
+    private WallpaperColors mWallpaperColors;
+
+    @Override
+    public WorkspaceSurfaceHolderCallback createWorkspaceSurfaceCallback(SurfaceView surfaceView) {
+        return new WorkspaceSurfaceHolderCallback(surfaceView, getContext(), shouldApplyWallpaperColors());
+    }
+
+    @Override
+    public void onCreate(Bundle bundle) {
+        super.onCreate(bundle);
+        Bundle arguments = getArguments();
+        if (arguments != null && arguments.getInt("preview_mode") == 0) {
+            mIgnoreInitialColorChange = true;
+        }
+    }
+
+    @Override
+    public void onWallpaperColorsChanged(WallpaperColors wallpaperColors) {
+        if (mIgnoreInitialColorChange || wallpaperColors == null) {
+            updateWorkspacePreview(mWorkspaceSurface, mWorkspaceSurfaceCallback, null);
+        } else if (!wallpaperColors.equals(mWallpaperColors) && shouldApplyWallpaperColors()) {
+            mWallpaperColors = wallpaperColors;
+            Context context = getContext();
+            RemoteViews.ColorResources.create(context,
+                    new WallpaperColorResources(wallpaperColors).getColorOverlay()).apply(context);
+            updateSystemBarColor(context);
+            getView().setBackgroundColor(
+                    MaterialAttributes.resolveOrThrow(context, android.R.attr.colorPrimary,
+                            "android.R.attr.colorPrimary is not set in the current theme"));
+            LayoutInflater inflater = LayoutInflater.from(context);
+            ViewGroup sectionHeaderContainer = (ViewGroup) getView().findViewById(
+                    R.id.section_header_container);
+            sectionHeaderContainer.removeAllViews();
+            setUpToolbar(inflater.inflate(R.layout.section_header, sectionHeaderContainer), true);
+            mFullScreenAnimation.ensureToolbarIsCorrectlyLocated();
+            mFullScreenAnimation.ensureToolbarIsCorrectlyColored();
+
+            ViewGroup fullscreenButtonsContainer = (ViewGroup) getView().findViewById(
+                    R.id.fullscreen_buttons_container);
+            fullscreenButtonsContainer.removeAllViews();
+            setFullScreenActions(
+                    inflater.inflate(R.layout.fullscreen_buttons, fullscreenButtonsContainer));
+            mBottomActionBar.setColor(inflater.getContext());
+            updateWorkspacePreview(mWorkspaceSurface, mWorkspaceSurfaceCallback, wallpaperColors);
+
+            ViewGroup separatedTabsContainer = (ViewGroup) getView().findViewById(
+                    R.id.separated_tabs_container);
+            separatedTabsContainer.removeAllViews();
+            setUpTabs((TabLayout) inflater.inflate(R.layout.separated_tabs,
+                    separatedTabsContainer).findViewById(R.id.separated_tabs));
+            mLockScreenPreviewer.release();
+            mLockPreviewContainer.removeAllViews();
+            mLockScreenPreviewer = new LockScreenPreviewer(getLifecycle(),
+                    context, mLockPreviewContainer);
+            mLockScreenPreviewer.setDateViewVisibility(!mFullScreenAnimation.isFullScreen());
+        }
+        mIgnoreInitialColorChange = false;
+        super.onWallpaperColorsChanged(wallpaperColors);
+    }
+}
diff --git a/src_override/com/android/wallpaper/picker/LiveWallpaperColorThemePreviewFragment.java b/src_override/com/android/wallpaper/picker/LiveWallpaperColorThemePreviewFragment.java
new file mode 100644
index 0000000..30eb1d8
--- /dev/null
+++ b/src_override/com/android/wallpaper/picker/LiveWallpaperColorThemePreviewFragment.java
@@ -0,0 +1,81 @@
+package com.android.wallpaper.picker;
+
+import android.app.WallpaperColors;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.SurfaceView;
+import android.view.ViewGroup;
+import android.widget.RemoteViews;
+
+import com.android.customization.model.color.WallpaperColorResources;
+import com.android.wallpaper.R;
+import com.android.wallpaper.widget.LockScreenPreviewer;
+
+import com.google.android.material.resources.MaterialAttributes;
+import com.google.android.material.tabs.TabLayout;
+
+public class LiveWallpaperColorThemePreviewFragment extends LivePreviewFragment implements
+        WallpaperColorThemePreview {
+    private boolean mIgnoreInitialColorChange;
+    private WallpaperColors mWallpaperColors;
+
+    @Override
+    public WorkspaceSurfaceHolderCallback createWorkspaceSurfaceCallback(SurfaceView surfaceView) {
+        return new WorkspaceSurfaceHolderCallback(surfaceView, getContext(), shouldApplyWallpaperColors());
+    }
+
+    @Override
+    public void onCreate(Bundle bundle) {
+        super.onCreate(bundle);
+        Bundle arguments = getArguments();
+        if (arguments != null && arguments.getInt("preview_mode") == 0) {
+            mIgnoreInitialColorChange = true;
+        }
+    }
+
+    @Override
+    public void onWallpaperColorsChanged(WallpaperColors wallpaperColors, int i) {
+        if (mIgnoreInitialColorChange || wallpaperColors == null) {
+            updateWorkspacePreview(mWorkspaceSurface, mWorkspaceSurfaceCallback, null);
+        } else if (!wallpaperColors.equals(mWallpaperColors) && shouldApplyWallpaperColors()) {
+            mWallpaperColors = wallpaperColors;
+            Context context = getContext();
+            RemoteViews.ColorResources.create(context,
+                    new WallpaperColorResources(wallpaperColors).getColorOverlay()).apply(context);
+            updateSystemBarColor(context);
+            getView().setBackgroundColor(
+                    MaterialAttributes.resolveOrThrow(context, android.R.attr.colorPrimary,
+                            "android.R.attr.colorPrimary is not set in the current theme"));
+            LayoutInflater inflater = LayoutInflater.from(context);
+            ViewGroup sectionHeaderContainer = (ViewGroup) getView().findViewById(
+                    R.id.section_header_container);
+            sectionHeaderContainer.removeAllViews();
+            setUpToolbar(inflater.inflate(R.layout.section_header, sectionHeaderContainer), true);
+            mFullScreenAnimation.ensureToolbarIsCorrectlyLocated();
+            mFullScreenAnimation.ensureToolbarIsCorrectlyColored();
+
+            ViewGroup fullscreenButtonsContainer = (ViewGroup) getView().findViewById(
+                    R.id.fullscreen_buttons_container);
+            fullscreenButtonsContainer.removeAllViews();
+            setFullScreenActions(
+                    inflater.inflate(R.layout.fullscreen_buttons, fullscreenButtonsContainer));
+            mBottomActionBar.setColor(inflater.getContext());
+            updateWorkspacePreview(mWorkspaceSurface, mWorkspaceSurfaceCallback, wallpaperColors);
+
+            ViewGroup separatedTabsContainer = (ViewGroup) getView().findViewById(
+                    R.id.separated_tabs_container);
+            separatedTabsContainer.removeAllViews();
+            setUpTabs((TabLayout) inflater.inflate(R.layout.separated_tabs,
+                    separatedTabsContainer).findViewById(
+                    R.id.separated_tabs));
+            mLockScreenPreviewer.release();
+            mLockPreviewContainer.removeAllViews();
+            mLockScreenPreviewer = new LockScreenPreviewer(getLifecycle(),
+                    context, mLockPreviewContainer);
+            mLockScreenPreviewer.setDateViewVisibility(!mFullScreenAnimation.isFullScreen());
+        }
+        mIgnoreInitialColorChange = false;
+        super.onWallpaperColorsChanged(wallpaperColors, i);
+    }
+}
diff --git a/src_override/com/android/wallpaper/picker/WallpaperColorThemePreview.java b/src_override/com/android/wallpaper/picker/WallpaperColorThemePreview.java
new file mode 100644
index 0000000..176dbbd
--- /dev/null
+++ b/src_override/com/android/wallpaper/picker/WallpaperColorThemePreview.java
@@ -0,0 +1,65 @@
+package com.android.wallpaper.picker;
+
+import android.app.WallpaperColors;
+import android.content.Context;
+import android.util.Log;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.Window;
+
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentActivity;
+
+import com.android.customization.model.color.ColorUtils;
+import com.android.customization.model.themedicon.ThemedIconSwitchProvider;
+
+import com.google.android.material.resources.MaterialAttributes;
+
+public interface WallpaperColorThemePreview {
+
+    default boolean shouldApplyWallpaperColors() {
+        FragmentActivity activity = ((Fragment) this).getActivity();
+        if (activity == null || activity.isFinishing()) {
+            Log.w("WallpaperColorThemePreview",
+                    "shouldApplyWallpaperColors: activity is null or finishing");
+            return false;
+        } else if (!ColorUtils.isMonetEnabled(activity)) {
+            Log.w("WallpaperColorThemePreview", "Monet is not enabled");
+            return false;
+        } else {
+            return true;
+        }
+    }
+
+    default void updateSystemBarColor(Context context) {
+        int resolveOrThrow = MaterialAttributes.resolveOrThrow(context, android.R.attr.colorPrimary,
+                "android.R.attr.colorPrimary is not set in the current theme");
+        Window window = ((Fragment) this).getActivity().getWindow();
+        window.setStatusBarColor(resolveOrThrow);
+        window.setNavigationBarColor(resolveOrThrow);
+    }
+
+    default void updateWorkspacePreview(SurfaceView surfaceView,
+            WorkspaceSurfaceHolderCallback workspaceSurfaceHolderCallback,
+            WallpaperColors wallpaperColors) {
+        if (shouldApplyWallpaperColors()) {
+            int visibility = surfaceView.getVisibility();
+            surfaceView.setVisibility(View.GONE);
+            if (workspaceSurfaceHolderCallback != null) {
+                workspaceSurfaceHolderCallback.cleanUp();
+                workspaceSurfaceHolderCallback.setWallpaperColors(wallpaperColors);
+                surfaceView.setUseAlpha();
+                surfaceView.setAlpha(0.0f);
+                workspaceSurfaceHolderCallback.setListener(
+                        new WorkspaceSurfaceHolderCallback.WorkspaceRenderListener() {
+                            @Override
+                            public void onWorkspaceRendered() {
+                                surfaceView.setTop(-1);
+                                surfaceView.animate().alpha(1.0f).setDuration(300).start();
+                            }
+                        });
+            }
+            surfaceView.setVisibility(visibility);
+        }
+    }
+}
From 0310d08ff08fb8c948e6bafef08766675dbd8cb9 Mon Sep 17 00:00:00 2001
From: Adithya R <gh0strider.2k18.reborn@gmail.com>
Date: Tue, 19 Apr 2022 21:33:32 +0530
Subject: [PATCH] ThemePicker: Import pixel themes stub package

Change-Id: I1e7c2e4f04c28db7c181892978ff5429fcc74437
Signed-off-by: althafvly <althafvly@gmail.com>
---

diff --git a/Android.bp b/Android.bp
index 988c3b6..2261598 100644
--- a/Android.bp
+++ b/Android.bp
@@ -120,10 +120,20 @@
     ],
     required: [
         "default_permissions_com.android.wallpaper",
-        "privapp_whitelist_com.android.wallpaper"
+        "privapp_whitelist_com.android.wallpaper",
+        "PixelThemesStub",
     ],
 }
 
+android_app {
+    name: "PixelThemesStub",
+    manifest: "PixelThemesStub/AndroidManifest.xml",
+    resource_dirs: ["PixelThemesStub/res"],
+    certificate: "platform",
+    product_specific: true,
+    sdk_version: "current",
+}
+
 prebuilt_etc {
     name: "default_permissions_com.android.wallpaper",
     system_ext_specific: true,
diff --git a/PixelThemesStub/AndroidManifest.xml b/PixelThemesStub/AndroidManifest.xml
new file mode 100644
index 0000000..7659dde
--- /dev/null
+++ b/PixelThemesStub/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8" standalone="no"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.google.android.apps.customization.pixel">
+    <application android:hasCode="false" android:label="@string/app_name"/>
+</manifest>
diff --git a/PixelThemesStub/res/values-af/strings.xml b/PixelThemesStub/res/values-af/strings.xml
new file mode 100644
index 0000000..6ff4013
--- /dev/null
+++ b/PixelThemesStub/res/values-af/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Koolstof</string>
+    <string name="bundle2_color_name">Papier</string>
+    <string name="bundle3_color_name">Son</string>
+    <string name="default_color_name">Klassiek</string>
+</resources>
diff --git a/PixelThemesStub/res/values-am/strings.xml b/PixelThemesStub/res/values-am/strings.xml
new file mode 100644
index 0000000..8a82d4a
--- /dev/null
+++ b/PixelThemesStub/res/values-am/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">ካርቦን</string>
+    <string name="bundle2_color_name">ወረቀት</string>
+    <string name="bundle3_color_name">ጸሐይ</string>
+    <string name="default_color_name">የታወቀ</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ar/strings.xml b/PixelThemesStub/res/values-ar/strings.xml
new file mode 100644
index 0000000..29d02e4
--- /dev/null
+++ b/PixelThemesStub/res/values-ar/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">أسود</string>
+    <string name="bundle2_color_name">أبيض</string>
+    <string name="bundle3_color_name">شمس</string>
+    <string name="default_color_name">كلاسيكي</string>
+</resources>
diff --git a/PixelThemesStub/res/values-as/strings.xml b/PixelThemesStub/res/values-as/strings.xml
new file mode 100644
index 0000000..af1293b
--- /dev/null
+++ b/PixelThemesStub/res/values-as/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">কাৰ্বন</string>
+    <string name="bundle2_color_name">কাগজ</string>
+    <string name="bundle3_color_name">সূৰ্য</string>
+    <string name="default_color_name">ক্লাছিক</string>
+</resources>
diff --git a/PixelThemesStub/res/values-az/strings.xml b/PixelThemesStub/res/values-az/strings.xml
new file mode 100644
index 0000000..27e8612
--- /dev/null
+++ b/PixelThemesStub/res/values-az/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Karbon</string>
+    <string name="bundle2_color_name">Kağız</string>
+    <string name="bundle3_color_name">Günəş</string>
+    <string name="default_color_name">Klassik</string>
+</resources>
diff --git a/PixelThemesStub/res/values-b+sr+Latn/strings.xml b/PixelThemesStub/res/values-b+sr+Latn/strings.xml
new file mode 100644
index 0000000..cd25dff
--- /dev/null
+++ b/PixelThemesStub/res/values-b+sr+Latn/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Karbon</string>
+    <string name="bundle2_color_name">Papir</string>
+    <string name="bundle3_color_name">Sunce</string>
+    <string name="default_color_name">Klasična</string>
+</resources>
diff --git a/PixelThemesStub/res/values-be/strings.xml b/PixelThemesStub/res/values-be/strings.xml
new file mode 100644
index 0000000..dc1fed3
--- /dev/null
+++ b/PixelThemesStub/res/values-be/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Вугаль</string>
+    <string name="bundle2_color_name">Папера</string>
+    <string name="bundle3_color_name">Сонца</string>
+    <string name="default_color_name">Класіка</string>
+</resources>
diff --git a/PixelThemesStub/res/values-bg/strings.xml b/PixelThemesStub/res/values-bg/strings.xml
new file mode 100644
index 0000000..f83c709
--- /dev/null
+++ b/PixelThemesStub/res/values-bg/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Графит</string>
+    <string name="bundle2_color_name">Хартия</string>
+    <string name="bundle3_color_name">Слънце</string>
+    <string name="default_color_name">Класически</string>
+</resources>
diff --git a/PixelThemesStub/res/values-bn/strings.xml b/PixelThemesStub/res/values-bn/strings.xml
new file mode 100644
index 0000000..fb42d21
--- /dev/null
+++ b/PixelThemesStub/res/values-bn/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">কার্বন</string>
+    <string name="bundle2_color_name">পেপার</string>
+    <string name="bundle3_color_name">সূর্য</string>
+    <string name="default_color_name">ক্লাসিক</string>
+</resources>
diff --git a/PixelThemesStub/res/values-bs/strings.xml b/PixelThemesStub/res/values-bs/strings.xml
new file mode 100644
index 0000000..80e6346
--- /dev/null
+++ b/PixelThemesStub/res/values-bs/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Antracit</string>
+    <string name="bundle2_color_name">Papir</string>
+    <string name="bundle3_color_name">Sunce</string>
+    <string name="default_color_name">Klasično</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ca/strings.xml b/PixelThemesStub/res/values-ca/strings.xml
new file mode 100644
index 0000000..5ceeff8
--- /dev/null
+++ b/PixelThemesStub/res/values-ca/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Antracita</string>
+    <string name="bundle2_color_name">Paper</string>
+    <string name="bundle3_color_name">Sol</string>
+    <string name="default_color_name">Clàssic</string>
+</resources>
diff --git a/PixelThemesStub/res/values-cs/strings.xml b/PixelThemesStub/res/values-cs/strings.xml
new file mode 100644
index 0000000..d1312bb
--- /dev/null
+++ b/PixelThemesStub/res/values-cs/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Uhlík</string>
+    <string name="bundle2_color_name">Papír</string>
+    <string name="bundle3_color_name">Slunce</string>
+    <string name="default_color_name">Klasické</string>
+</resources>
diff --git a/PixelThemesStub/res/values-da/strings.xml b/PixelThemesStub/res/values-da/strings.xml
new file mode 100644
index 0000000..b860f29
--- /dev/null
+++ b/PixelThemesStub/res/values-da/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Paper</string>
+    <string name="bundle3_color_name">Sun</string>
+    <string name="default_color_name">Classic</string>
+</resources>
diff --git a/PixelThemesStub/res/values-de/strings.xml b/PixelThemesStub/res/values-de/strings.xml
new file mode 100644
index 0000000..5b98b28
--- /dev/null
+++ b/PixelThemesStub/res/values-de/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Papier</string>
+    <string name="bundle3_color_name">Sonne</string>
+    <string name="default_color_name">Klassisch</string>
+</resources>
diff --git a/PixelThemesStub/res/values-el/strings.xml b/PixelThemesStub/res/values-el/strings.xml
new file mode 100644
index 0000000..c9f254a
--- /dev/null
+++ b/PixelThemesStub/res/values-el/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Ανθρακί</string>
+    <string name="bundle2_color_name">Paper</string>
+    <string name="bundle3_color_name">Ήλιος</string>
+    <string name="default_color_name">Κλασικό</string>
+</resources>
diff --git a/PixelThemesStub/res/values-en-rAU/strings.xml b/PixelThemesStub/res/values-en-rAU/strings.xml
new file mode 100644
index 0000000..b860f29
--- /dev/null
+++ b/PixelThemesStub/res/values-en-rAU/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Paper</string>
+    <string name="bundle3_color_name">Sun</string>
+    <string name="default_color_name">Classic</string>
+</resources>
diff --git a/PixelThemesStub/res/values-en-rCA/strings.xml b/PixelThemesStub/res/values-en-rCA/strings.xml
new file mode 100644
index 0000000..b860f29
--- /dev/null
+++ b/PixelThemesStub/res/values-en-rCA/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Paper</string>
+    <string name="bundle3_color_name">Sun</string>
+    <string name="default_color_name">Classic</string>
+</resources>
diff --git a/PixelThemesStub/res/values-en-rGB/strings.xml b/PixelThemesStub/res/values-en-rGB/strings.xml
new file mode 100644
index 0000000..b860f29
--- /dev/null
+++ b/PixelThemesStub/res/values-en-rGB/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Paper</string>
+    <string name="bundle3_color_name">Sun</string>
+    <string name="default_color_name">Classic</string>
+</resources>
diff --git a/PixelThemesStub/res/values-en-rIN/strings.xml b/PixelThemesStub/res/values-en-rIN/strings.xml
new file mode 100644
index 0000000..b860f29
--- /dev/null
+++ b/PixelThemesStub/res/values-en-rIN/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Paper</string>
+    <string name="bundle3_color_name">Sun</string>
+    <string name="default_color_name">Classic</string>
+</resources>
diff --git a/PixelThemesStub/res/values-en-rXA/strings.xml b/PixelThemesStub/res/values-en-rXA/strings.xml
new file mode 100644
index 0000000..57ff5cb
--- /dev/null
+++ b/PixelThemesStub/res/values-en-rXA/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">[Çåŕɓöñ one two]</string>
+    <string name="bundle2_color_name">[Þåþéŕ one]</string>
+    <string name="bundle3_color_name">[Šûñ one]</string>
+    <string name="default_color_name">[Çļåššîç one two]</string>
+</resources>
diff --git a/PixelThemesStub/res/values-es-rUS/strings.xml b/PixelThemesStub/res/values-es-rUS/strings.xml
new file mode 100644
index 0000000..4717459
--- /dev/null
+++ b/PixelThemesStub/res/values-es-rUS/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbón</string>
+    <string name="bundle2_color_name">Papel</string>
+    <string name="bundle3_color_name">Sol</string>
+    <string name="default_color_name">Clásico</string>
+</resources>
diff --git a/PixelThemesStub/res/values-es/strings.xml b/PixelThemesStub/res/values-es/strings.xml
new file mode 100644
index 0000000..99296fe
--- /dev/null
+++ b/PixelThemesStub/res/values-es/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Antracita</string>
+    <string name="bundle2_color_name">Papel</string>
+    <string name="bundle3_color_name">Sol</string>
+    <string name="default_color_name">Clásico</string>
+</resources>
diff --git a/PixelThemesStub/res/values-et/strings.xml b/PixelThemesStub/res/values-et/strings.xml
new file mode 100644
index 0000000..de4497b
--- /dev/null
+++ b/PixelThemesStub/res/values-et/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Süsinik</string>
+    <string name="bundle2_color_name">Paber</string>
+    <string name="bundle3_color_name">Päike</string>
+    <string name="default_color_name">Klassikaline</string>
+</resources>
diff --git a/PixelThemesStub/res/values-eu/strings.xml b/PixelThemesStub/res/values-eu/strings.xml
new file mode 100644
index 0000000..dcc5c85
--- /dev/null
+++ b/PixelThemesStub/res/values-eu/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Ikatza</string>
+    <string name="bundle2_color_name">Papera</string>
+    <string name="bundle3_color_name">Eguzkia</string>
+    <string name="default_color_name">Klasikoa</string>
+</resources>
diff --git a/PixelThemesStub/res/values-fa/strings.xml b/PixelThemesStub/res/values-fa/strings.xml
new file mode 100644
index 0000000..b8a2238
--- /dev/null
+++ b/PixelThemesStub/res/values-fa/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">کربنی</string>
+    <string name="bundle2_color_name">کاغذی</string>
+    <string name="bundle3_color_name">آفتابی</string>
+    <string name="default_color_name">قدیمی</string>
+</resources>
diff --git a/PixelThemesStub/res/values-fi/strings.xml b/PixelThemesStub/res/values-fi/strings.xml
new file mode 100644
index 0000000..b860f29
--- /dev/null
+++ b/PixelThemesStub/res/values-fi/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Paper</string>
+    <string name="bundle3_color_name">Sun</string>
+    <string name="default_color_name">Classic</string>
+</resources>
diff --git a/PixelThemesStub/res/values-fr-rCA/strings.xml b/PixelThemesStub/res/values-fr-rCA/strings.xml
new file mode 100644
index 0000000..2fa31ae
--- /dev/null
+++ b/PixelThemesStub/res/values-fr-rCA/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbone</string>
+    <string name="bundle2_color_name">Papier</string>
+    <string name="bundle3_color_name">Soleil</string>
+    <string name="default_color_name">Classique</string>
+</resources>
diff --git a/PixelThemesStub/res/values-fr/strings.xml b/PixelThemesStub/res/values-fr/strings.xml
new file mode 100644
index 0000000..99b7c1f
--- /dev/null
+++ b/PixelThemesStub/res/values-fr/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Anthracite</string>
+    <string name="bundle2_color_name">Papier</string>
+    <string name="bundle3_color_name">Soleil</string>
+    <string name="default_color_name">Classique</string>
+</resources>
diff --git a/PixelThemesStub/res/values-gl/strings.xml b/PixelThemesStub/res/values-gl/strings.xml
new file mode 100644
index 0000000..99296fe
--- /dev/null
+++ b/PixelThemesStub/res/values-gl/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Antracita</string>
+    <string name="bundle2_color_name">Papel</string>
+    <string name="bundle3_color_name">Sol</string>
+    <string name="default_color_name">Clásico</string>
+</resources>
diff --git a/PixelThemesStub/res/values-gu/strings.xml b/PixelThemesStub/res/values-gu/strings.xml
new file mode 100644
index 0000000..c24246d
--- /dev/null
+++ b/PixelThemesStub/res/values-gu/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">કાર્બન</string>
+    <string name="bundle2_color_name">પેપર</string>
+    <string name="bundle3_color_name">સન</string>
+    <string name="default_color_name">ક્લાસિક</string>
+</resources>
diff --git a/PixelThemesStub/res/values-hi/strings.xml b/PixelThemesStub/res/values-hi/strings.xml
new file mode 100644
index 0000000..283dc3f
--- /dev/null
+++ b/PixelThemesStub/res/values-hi/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">कार्बन</string>
+    <string name="bundle2_color_name">पेपर</string>
+    <string name="bundle3_color_name">सन</string>
+    <string name="default_color_name">क्लासिक</string>
+</resources>
diff --git a/PixelThemesStub/res/values-hr/strings.xml b/PixelThemesStub/res/values-hr/strings.xml
new file mode 100644
index 0000000..9689451
--- /dev/null
+++ b/PixelThemesStub/res/values-hr/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Antracit</string>
+    <string name="bundle2_color_name">Papir</string>
+    <string name="bundle3_color_name">ned</string>
+    <string name="default_color_name">Klasična</string>
+</resources>
diff --git a/PixelThemesStub/res/values-hu/strings.xml b/PixelThemesStub/res/values-hu/strings.xml
new file mode 100644
index 0000000..f53068b
--- /dev/null
+++ b/PixelThemesStub/res/values-hu/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Antracit</string>
+    <string name="bundle2_color_name">Papír</string>
+    <string name="bundle3_color_name">Nap</string>
+    <string name="default_color_name">Klasszikus</string>
+</resources>
diff --git a/PixelThemesStub/res/values-hy/strings.xml b/PixelThemesStub/res/values-hy/strings.xml
new file mode 100644
index 0000000..ec14ef0
--- /dev/null
+++ b/PixelThemesStub/res/values-hy/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Ածուխ</string>
+    <string name="bundle2_color_name">Թուղթ</string>
+    <string name="bundle3_color_name">Արև</string>
+    <string name="default_color_name">Դասական</string>
+</resources>
diff --git a/PixelThemesStub/res/values-in/strings.xml b/PixelThemesStub/res/values-in/strings.xml
new file mode 100644
index 0000000..9cf0b5e
--- /dev/null
+++ b/PixelThemesStub/res/values-in/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Karbon</string>
+    <string name="bundle2_color_name">Kertas</string>
+    <string name="bundle3_color_name">Matahari</string>
+    <string name="default_color_name">Klasik</string>
+</resources>
diff --git a/PixelThemesStub/res/values-is/strings.xml b/PixelThemesStub/res/values-is/strings.xml
new file mode 100644
index 0000000..e3659e8
--- /dev/null
+++ b/PixelThemesStub/res/values-is/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Kolgrátt</string>
+    <string name="bundle2_color_name">Pappír</string>
+    <string name="bundle3_color_name">Sólgult</string>
+    <string name="default_color_name">Sígilt</string>
+</resources>
diff --git a/PixelThemesStub/res/values-it/strings.xml b/PixelThemesStub/res/values-it/strings.xml
new file mode 100644
index 0000000..9ad5a68
--- /dev/null
+++ b/PixelThemesStub/res/values-it/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Grigio carbonio</string>
+    <string name="bundle2_color_name">Carta</string>
+    <string name="bundle3_color_name">Sole</string>
+    <string name="default_color_name">Classico</string>
+</resources>
diff --git a/PixelThemesStub/res/values-iw/strings.xml b/PixelThemesStub/res/values-iw/strings.xml
new file mode 100644
index 0000000..ed4f7f7
--- /dev/null
+++ b/PixelThemesStub/res/values-iw/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">פחם</string>
+    <string name="bundle2_color_name">נייר</string>
+    <string name="bundle3_color_name">שמש</string>
+    <string name="default_color_name">קלאסי</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ja/strings.xml b/PixelThemesStub/res/values-ja/strings.xml
new file mode 100644
index 0000000..9be48dd
--- /dev/null
+++ b/PixelThemesStub/res/values-ja/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">カーボン</string>
+    <string name="bundle2_color_name">ペーパー</string>
+    <string name="bundle3_color_name">太陽</string>
+    <string name="default_color_name">クラシック</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ka/strings.xml b/PixelThemesStub/res/values-ka/strings.xml
new file mode 100644
index 0000000..905e1bb
--- /dev/null
+++ b/PixelThemesStub/res/values-ka/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">ნახშირბადი</string>
+    <string name="bundle2_color_name">ქაღალდი</string>
+    <string name="bundle3_color_name">მზე</string>
+    <string name="default_color_name">კლასიკური</string>
+</resources>
diff --git a/PixelThemesStub/res/values-kk/strings.xml b/PixelThemesStub/res/values-kk/strings.xml
new file mode 100644
index 0000000..bae01bf
--- /dev/null
+++ b/PixelThemesStub/res/values-kk/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Көмір</string>
+    <string name="bundle2_color_name">Қағаз</string>
+    <string name="bundle3_color_name">Күн</string>
+    <string name="default_color_name">Классика</string>
+</resources>
diff --git a/PixelThemesStub/res/values-km/strings.xml b/PixelThemesStub/res/values-km/strings.xml
new file mode 100644
index 0000000..a901cb8
--- /dev/null
+++ b/PixelThemesStub/res/values-km/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">កាបូន</string>
+    <string name="bundle2_color_name">ក្រដាស</string>
+    <string name="bundle3_color_name">ព្រះអាទិត្យ</string>
+    <string name="default_color_name">ក្លាស៊ិក</string>
+</resources>
diff --git a/PixelThemesStub/res/values-kn/strings.xml b/PixelThemesStub/res/values-kn/strings.xml
new file mode 100644
index 0000000..aefe046
--- /dev/null
+++ b/PixelThemesStub/res/values-kn/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">ಕಾರ್ಬನ್</string>
+    <string name="bundle2_color_name">ಪೇಪರ್</string>
+    <string name="bundle3_color_name">ಭಾನು</string>
+    <string name="default_color_name">ಕ್ಲಾಸಿಕ್</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ko/strings.xml b/PixelThemesStub/res/values-ko/strings.xml
new file mode 100644
index 0000000..6e447e3
--- /dev/null
+++ b/PixelThemesStub/res/values-ko/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">카본</string>
+    <string name="bundle2_color_name">페이퍼</string>
+    <string name="bundle3_color_name">태양</string>
+    <string name="default_color_name">클래식</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ky/strings.xml b/PixelThemesStub/res/values-ky/strings.xml
new file mode 100644
index 0000000..48c50d3
--- /dev/null
+++ b/PixelThemesStub/res/values-ky/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Кара</string>
+    <string name="bundle2_color_name">Кагаз</string>
+    <string name="bundle3_color_name">Күн</string>
+    <string name="default_color_name">Классика</string>
+</resources>
diff --git a/PixelThemesStub/res/values-lo/strings.xml b/PixelThemesStub/res/values-lo/strings.xml
new file mode 100644
index 0000000..a72552f
--- /dev/null
+++ b/PixelThemesStub/res/values-lo/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">ຄາບອນ</string>
+    <string name="bundle2_color_name">ເຈ້ຍ</string>
+    <string name="bundle3_color_name">ອາທິດ</string>
+    <string name="default_color_name">ຄລາສສິກ</string>
+</resources>
diff --git a/PixelThemesStub/res/values-lt/strings.xml b/PixelThemesStub/res/values-lt/strings.xml
new file mode 100644
index 0000000..741bd5c
--- /dev/null
+++ b/PixelThemesStub/res/values-lt/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Tamsiai pilka</string>
+    <string name="bundle2_color_name">Popieriaus</string>
+    <string name="bundle3_color_name">Saulės</string>
+    <string name="default_color_name">Klasikinė</string>
+</resources>
diff --git a/PixelThemesStub/res/values-lv/strings.xml b/PixelThemesStub/res/values-lv/strings.xml
new file mode 100644
index 0000000..48c3e25
--- /dev/null
+++ b/PixelThemesStub/res/values-lv/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Ogle</string>
+    <string name="bundle2_color_name">Papīrs</string>
+    <string name="bundle3_color_name">Saule</string>
+    <string name="default_color_name">Klasika</string>
+</resources>
diff --git a/PixelThemesStub/res/values-mk/strings.xml b/PixelThemesStub/res/values-mk/strings.xml
new file mode 100644
index 0000000..c318c96
--- /dev/null
+++ b/PixelThemesStub/res/values-mk/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Јаглен</string>
+    <string name="bundle2_color_name">Хартија</string>
+    <string name="bundle3_color_name">Сонце</string>
+    <string name="default_color_name">Класична</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ml/strings.xml b/PixelThemesStub/res/values-ml/strings.xml
new file mode 100644
index 0000000..186ed59
--- /dev/null
+++ b/PixelThemesStub/res/values-ml/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">കാർബൺ</string>
+    <string name="bundle2_color_name">പേപ്പർ</string>
+    <string name="bundle3_color_name">സൂര്യന്‍</string>
+    <string name="default_color_name">ക്ലാസിക്</string>
+</resources>
diff --git a/PixelThemesStub/res/values-mn/strings.xml b/PixelThemesStub/res/values-mn/strings.xml
new file mode 100644
index 0000000..11f9952
--- /dev/null
+++ b/PixelThemesStub/res/values-mn/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Нүүрс</string>
+    <string name="bundle2_color_name">Цаас</string>
+    <string name="bundle3_color_name">Нар</string>
+    <string name="default_color_name">Сонгодог</string>
+</resources>
diff --git a/PixelThemesStub/res/values-mr/strings.xml b/PixelThemesStub/res/values-mr/strings.xml
new file mode 100644
index 0000000..c235bb6
--- /dev/null
+++ b/PixelThemesStub/res/values-mr/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">कार्बन</string>
+    <string name="bundle2_color_name">पेपर</string>
+    <string name="bundle3_color_name">सूर्य</string>
+    <string name="default_color_name">क्लासिक</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ms/strings.xml b/PixelThemesStub/res/values-ms/strings.xml
new file mode 100644
index 0000000..9cf0b5e
--- /dev/null
+++ b/PixelThemesStub/res/values-ms/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Karbon</string>
+    <string name="bundle2_color_name">Kertas</string>
+    <string name="bundle3_color_name">Matahari</string>
+    <string name="default_color_name">Klasik</string>
+</resources>
diff --git a/PixelThemesStub/res/values-my/strings.xml b/PixelThemesStub/res/values-my/strings.xml
new file mode 100644
index 0000000..43a519e
--- /dev/null
+++ b/PixelThemesStub/res/values-my/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">မီးသွေး</string>
+    <string name="bundle2_color_name">စာရွက်</string>
+    <string name="bundle3_color_name">နေ</string>
+    <string name="default_color_name">မူရင်း</string>
+</resources>
diff --git a/PixelThemesStub/res/values-nb/strings.xml b/PixelThemesStub/res/values-nb/strings.xml
new file mode 100644
index 0000000..933871a
--- /dev/null
+++ b/PixelThemesStub/res/values-nb/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Karbon</string>
+    <string name="bundle2_color_name">Papir</string>
+    <string name="bundle3_color_name">Sol</string>
+    <string name="default_color_name">Klassisk</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ne/strings.xml b/PixelThemesStub/res/values-ne/strings.xml
new file mode 100644
index 0000000..ab553c9
--- /dev/null
+++ b/PixelThemesStub/res/values-ne/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">कार्बन</string>
+    <string name="bundle2_color_name">कागज</string>
+    <string name="bundle3_color_name">आइत</string>
+    <string name="default_color_name">क्लासिक</string>
+</resources>
diff --git a/PixelThemesStub/res/values-nl/strings.xml b/PixelThemesStub/res/values-nl/strings.xml
new file mode 100644
index 0000000..e8befed
--- /dev/null
+++ b/PixelThemesStub/res/values-nl/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Papier</string>
+    <string name="bundle3_color_name">Zon</string>
+    <string name="default_color_name">Klassiek</string>
+</resources>
diff --git a/PixelThemesStub/res/values-or/strings.xml b/PixelThemesStub/res/values-or/strings.xml
new file mode 100644
index 0000000..6c59b6e
--- /dev/null
+++ b/PixelThemesStub/res/values-or/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">କାର୍ବନ୍</string>
+    <string name="bundle2_color_name">ପେପର୍</string>
+    <string name="bundle3_color_name">ସୂର୍ଯ୍ୟ</string>
+    <string name="default_color_name">କ୍ଲାସିକ୍</string>
+</resources>
diff --git a/PixelThemesStub/res/values-pa/strings.xml b/PixelThemesStub/res/values-pa/strings.xml
new file mode 100644
index 0000000..c636300
--- /dev/null
+++ b/PixelThemesStub/res/values-pa/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">ਕਾਰਬਨ</string>
+    <string name="bundle2_color_name">ਪੇਪਰ</string>
+    <string name="bundle3_color_name">ਸੂਰਜ</string>
+    <string name="default_color_name">ਕਲਾਸਿਕ</string>
+</resources>
diff --git a/PixelThemesStub/res/values-pl/strings.xml b/PixelThemesStub/res/values-pl/strings.xml
new file mode 100644
index 0000000..d3066f3
--- /dev/null
+++ b/PixelThemesStub/res/values-pl/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Antracyt</string>
+    <string name="bundle2_color_name">Papier</string>
+    <string name="bundle3_color_name">Słońce</string>
+    <string name="default_color_name">Klasyka</string>
+</resources>
diff --git a/PixelThemesStub/res/values-pt-rPT/strings.xml b/PixelThemesStub/res/values-pt-rPT/strings.xml
new file mode 100644
index 0000000..1b0f7b5
--- /dev/null
+++ b/PixelThemesStub/res/values-pt-rPT/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbono</string>
+    <string name="bundle2_color_name">Papel</string>
+    <string name="bundle3_color_name">Sol</string>
+    <string name="default_color_name">Clássico</string>
+</resources>
diff --git a/PixelThemesStub/res/values-pt/strings.xml b/PixelThemesStub/res/values-pt/strings.xml
new file mode 100644
index 0000000..1b0f7b5
--- /dev/null
+++ b/PixelThemesStub/res/values-pt/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbono</string>
+    <string name="bundle2_color_name">Papel</string>
+    <string name="bundle3_color_name">Sol</string>
+    <string name="default_color_name">Clássico</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ro/strings.xml b/PixelThemesStub/res/values-ro/strings.xml
new file mode 100644
index 0000000..58f44d3
--- /dev/null
+++ b/PixelThemesStub/res/values-ro/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Hârtie</string>
+    <string name="bundle3_color_name">Soare</string>
+    <string name="default_color_name">Clasic</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ru/strings.xml b/PixelThemesStub/res/values-ru/strings.xml
new file mode 100644
index 0000000..86548b8
--- /dev/null
+++ b/PixelThemesStub/res/values-ru/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Уголь</string>
+    <string name="bundle2_color_name">Бумага</string>
+    <string name="bundle3_color_name">Солнце</string>
+    <string name="default_color_name">Классика</string>
+</resources>
diff --git a/PixelThemesStub/res/values-si/strings.xml b/PixelThemesStub/res/values-si/strings.xml
new file mode 100644
index 0000000..1eb4439
--- /dev/null
+++ b/PixelThemesStub/res/values-si/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">කාබන්</string>
+    <string name="bundle2_color_name">පත්‍රය</string>
+    <string name="bundle3_color_name">සූර්යයා</string>
+    <string name="default_color_name">පැරණි</string>
+</resources>
diff --git a/PixelThemesStub/res/values-sk/strings.xml b/PixelThemesStub/res/values-sk/strings.xml
new file mode 100644
index 0000000..d0143c1
--- /dev/null
+++ b/PixelThemesStub/res/values-sk/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Uhlík</string>
+    <string name="bundle2_color_name">Papier</string>
+    <string name="bundle3_color_name">Slnko</string>
+    <string name="default_color_name">Klasické</string>
+</resources>
diff --git a/PixelThemesStub/res/values-sl/strings.xml b/PixelThemesStub/res/values-sl/strings.xml
new file mode 100644
index 0000000..ca6719d
--- /dev/null
+++ b/PixelThemesStub/res/values-sl/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Grafitna</string>
+    <string name="bundle2_color_name">Papir</string>
+    <string name="bundle3_color_name">Sonce</string>
+    <string name="default_color_name">Klasično</string>
+</resources>
diff --git a/PixelThemesStub/res/values-sq/strings.xml b/PixelThemesStub/res/values-sq/strings.xml
new file mode 100644
index 0000000..6d58756
--- /dev/null
+++ b/PixelThemesStub/res/values-sq/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Karbon</string>
+    <string name="bundle2_color_name">Letër</string>
+    <string name="bundle3_color_name">Dielli</string>
+    <string name="default_color_name">Klasikë</string>
+</resources>
diff --git a/PixelThemesStub/res/values-sr/strings.xml b/PixelThemesStub/res/values-sr/strings.xml
new file mode 100644
index 0000000..e54d619
--- /dev/null
+++ b/PixelThemesStub/res/values-sr/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Карбон</string>
+    <string name="bundle2_color_name">Папир</string>
+    <string name="bundle3_color_name">Сунце</string>
+    <string name="default_color_name">Класична</string>
+</resources>
diff --git a/PixelThemesStub/res/values-sv/strings.xml b/PixelThemesStub/res/values-sv/strings.xml
new file mode 100644
index 0000000..47e205e
--- /dev/null
+++ b/PixelThemesStub/res/values-sv/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Kol</string>
+    <string name="bundle2_color_name">Papper</string>
+    <string name="bundle3_color_name">Sol</string>
+    <string name="default_color_name">Klassisk</string>
+</resources>
diff --git a/PixelThemesStub/res/values-sw/strings.xml b/PixelThemesStub/res/values-sw/strings.xml
new file mode 100644
index 0000000..8ef7922
--- /dev/null
+++ b/PixelThemesStub/res/values-sw/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Kaboni</string>
+    <string name="bundle2_color_name">Karatasi</string>
+    <string name="bundle3_color_name">Jua</string>
+    <string name="default_color_name">Kawaida</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ta/strings.xml b/PixelThemesStub/res/values-ta/strings.xml
new file mode 100644
index 0000000..df7d527
--- /dev/null
+++ b/PixelThemesStub/res/values-ta/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">கார்பன்</string>
+    <string name="bundle2_color_name">பேப்பர்</string>
+    <string name="bundle3_color_name">சூரியன்</string>
+    <string name="default_color_name">கிளாசிக்</string>
+</resources>
diff --git a/PixelThemesStub/res/values-te/strings.xml b/PixelThemesStub/res/values-te/strings.xml
new file mode 100644
index 0000000..5b16d54
--- /dev/null
+++ b/PixelThemesStub/res/values-te/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">విస్మరించు</string>
+    <string name="bundle2_color_name">పేపర్</string>
+    <string name="bundle3_color_name">సూర్యుడు</string>
+    <string name="default_color_name">క్లాసిక్</string>
+</resources>
diff --git a/PixelThemesStub/res/values-th/strings.xml b/PixelThemesStub/res/values-th/strings.xml
new file mode 100644
index 0000000..ca201c1
--- /dev/null
+++ b/PixelThemesStub/res/values-th/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">สีถ่าน</string>
+    <string name="bundle2_color_name">กระดาษ</string>
+    <string name="bundle3_color_name">ดวงอาทิตย์</string>
+    <string name="default_color_name">คลาสสิก</string>
+</resources>
diff --git a/PixelThemesStub/res/values-tl/strings.xml b/PixelThemesStub/res/values-tl/strings.xml
new file mode 100644
index 0000000..0bc9770
--- /dev/null
+++ b/PixelThemesStub/res/values-tl/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Papel</string>
+    <string name="bundle3_color_name">Araw</string>
+    <string name="default_color_name">Classic</string>
+</resources>
diff --git a/PixelThemesStub/res/values-tr/strings.xml b/PixelThemesStub/res/values-tr/strings.xml
new file mode 100644
index 0000000..1fe8242
--- /dev/null
+++ b/PixelThemesStub/res/values-tr/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Karbon</string>
+    <string name="bundle2_color_name">Kağıt</string>
+    <string name="bundle3_color_name">Güneş</string>
+    <string name="default_color_name">Klasik</string>
+</resources>
diff --git a/PixelThemesStub/res/values-uk/strings.xml b/PixelThemesStub/res/values-uk/strings.xml
new file mode 100644
index 0000000..16f6ad8
--- /dev/null
+++ b/PixelThemesStub/res/values-uk/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Графіт</string>
+    <string name="bundle2_color_name">Папір</string>
+    <string name="bundle3_color_name">Сонце</string>
+    <string name="default_color_name">Класика</string>
+</resources>
diff --git a/PixelThemesStub/res/values-ur/strings.xml b/PixelThemesStub/res/values-ur/strings.xml
new file mode 100644
index 0000000..e8b133f
--- /dev/null
+++ b/PixelThemesStub/res/values-ur/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">کاربن</string>
+    <string name="bundle2_color_name">کاغذ</string>
+    <string name="bundle3_color_name">اتوار</string>
+    <string name="default_color_name">کلاسک</string>
+</resources>
diff --git a/PixelThemesStub/res/values-uz/strings.xml b/PixelThemesStub/res/values-uz/strings.xml
new file mode 100644
index 0000000..c33ddb4
--- /dev/null
+++ b/PixelThemesStub/res/values-uz/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Karbon</string>
+    <string name="bundle2_color_name">Qogʻoz</string>
+    <string name="bundle3_color_name">Quyosh</string>
+    <string name="default_color_name">Klassik</string>
+</resources>
diff --git a/PixelThemesStub/res/values-vi/strings.xml b/PixelThemesStub/res/values-vi/strings.xml
new file mode 100644
index 0000000..386b9af
--- /dev/null
+++ b/PixelThemesStub/res/values-vi/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Xám đen</string>
+    <string name="bundle2_color_name">Giấy</string>
+    <string name="bundle3_color_name">Mặt trời</string>
+    <string name="default_color_name">Cổ điển</string>
+</resources>
diff --git a/PixelThemesStub/res/values-zh-rCN/strings.xml b/PixelThemesStub/res/values-zh-rCN/strings.xml
new file mode 100644
index 0000000..8e02640
--- /dev/null
+++ b/PixelThemesStub/res/values-zh-rCN/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">木炭黑</string>
+    <string name="bundle2_color_name">纸张白</string>
+    <string name="bundle3_color_name">太阳色</string>
+    <string name="default_color_name">经典色</string>
+</resources>
diff --git a/PixelThemesStub/res/values-zh-rHK/strings.xml b/PixelThemesStub/res/values-zh-rHK/strings.xml
new file mode 100644
index 0000000..4f5abb9
--- /dev/null
+++ b/PixelThemesStub/res/values-zh-rHK/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">木炭黑</string>
+    <string name="bundle2_color_name">紙張</string>
+    <string name="bundle3_color_name">太陽</string>
+    <string name="default_color_name">經典</string>
+</resources>
diff --git a/PixelThemesStub/res/values-zh-rTW/strings.xml b/PixelThemesStub/res/values-zh-rTW/strings.xml
new file mode 100644
index 0000000..0b96bd5
--- /dev/null
+++ b/PixelThemesStub/res/values-zh-rTW/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">碳</string>
+    <string name="bundle2_color_name">紙張</string>
+    <string name="bundle3_color_name">陽光</string>
+    <string name="default_color_name">經典</string>
+</resources>
diff --git a/PixelThemesStub/res/values-zu/strings.xml b/PixelThemesStub/res/values-zu/strings.xml
new file mode 100644
index 0000000..af16524
--- /dev/null
+++ b/PixelThemesStub/res/values-zu/strings.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="bundle1_color_name">Ikhabhoni</string>
+    <string name="bundle2_color_name">Iphepha</string>
+    <string name="bundle3_color_name">Ilanga</string>
+    <string name="default_color_name">Okwakudala</string>
+</resources>
diff --git a/PixelThemesStub/res/values/arrays.xml b/PixelThemesStub/res/values/arrays.xml
new file mode 100644
index 0000000..1797e3d
--- /dev/null
+++ b/PixelThemesStub/res/values/arrays.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string-array name="color_bundles">
+        <item>default</item>
+        <item>bundle1</item>
+        <item>bundle2</item>
+        <item>bundle3</item>
+    </string-array>
+</resources>
diff --git a/PixelThemesStub/res/values/colors.xml b/PixelThemesStub/res/values/colors.xml
new file mode 100644
index 0000000..6a04c2e
--- /dev/null
+++ b/PixelThemesStub/res/values/colors.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="color_primary_bundle1">#ff0a8758</color>
+    <color name="color_primary_bundle2">#ff746bc1</color>
+    <color name="color_primary_bundle3">#ffa66800</color>
+    <color name="color_primary_default">#ffffffff</color>
+    <color name="color_secondary_bundle1">#ff0a8758</color>
+    <color name="color_secondary_bundle2">#ff746bc1</color>
+    <color name="color_secondary_bundle3">#ffa66800</color>
+    <color name="color_secondary_default">#ff1a73e8</color>
+</resources>
diff --git a/PixelThemesStub/res/values/strings.xml b/PixelThemesStub/res/values/strings.xml
new file mode 100644
index 0000000..8e27a18
--- /dev/null
+++ b/PixelThemesStub/res/values/strings.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Pixel Themes</string>
+    <string name="bundle1_color_name">Carbon</string>
+    <string name="bundle2_color_name">Paper</string>
+    <string name="bundle3_color_name">Sun</string>
+    <string name="bundle_name_bundle1">@string/bundle1_color_name</string>
+    <string name="bundle_name_bundle2">@string/bundle2_color_name</string>
+    <string name="bundle_name_bundle3">@string/bundle3_color_name</string>
+    <string name="bundle_name_default">@string/default_color_name</string>
+    <string name="default_color_name">Classic</string>
+</resources>
diff --git a/res/values/override.xml b/res/values/override.xml
index a070dbe..cf30a26 100644
--- a/res/values/override.xml
+++ b/res/values/override.xml
@@ -16,6 +16,7 @@
      limitations under the License.
 -->
 <resources>
+    <string name="themes_colors_provider" translatable="false">com.google.android.apps.customization.pixel</string>
     <string name="themes_stub_package" translatable="false"/>
     <string name="clocks_stub_package" translatable="false"/>
     <!-- Authority of a provider in System UI that will provide preview info for available clockfaces. -->
diff --git a/src/com/android/customization/model/color/ColorCustomizationManager.kt b/src/com/android/customization/model/color/ColorCustomizationManager.kt
index 87ba029..101b29f 100644
--- a/src/com/android/customization/model/color/ColorCustomizationManager.kt
+++ b/src/com/android/customization/model/color/ColorCustomizationManager.kt
@@ -40,7 +40,7 @@
                 sColorCustomizationManager = ColorCustomizationManager(
                     ColorProvider(
                         applicationContext, applicationContext.getString(
-                            R.string.themes_stub_package
+                            R.string.themes_colors_provider
                         )
                     ), applicationContext.contentResolver
                 )
